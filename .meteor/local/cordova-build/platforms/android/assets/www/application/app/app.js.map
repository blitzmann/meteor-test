{"version":3,"sources":["meteor://ðŸ’»app/imports/components/todosList/todosList.html","meteor://ðŸ’»app/imports/components/todosList/todosList.js","meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/imports/startup/accounts-config.js","meteor://ðŸ’»app/client/main.html.js","meteor://ðŸ’»app/client/main.js"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oH;;;;;;;;;;;;ACdA,OAAO,OAAP,MAAoB,SAApB;AACA,OAAO,aAAP,MAA0B,gBAA1B;AACA,SAAS,KAAT,QAAsB,oBAAtB;AACA,SAAS,MAAT,QAAuB,eAAvB;AACA,OAAO,QAAP,MAAqB,kBAArB;;IAEM,a;AACJ,yBAAY,MAAZ,EAAoB;AAAA;;AAClB,WAAO,SAAP,CAAiB,IAAjB;;AAEA,SAAK,SAAL,CAAe,OAAf;AACA,SAAK,aAAL,GAAqB,KAArB;;AAEA,SAAK,OAAL,CAAa;AACX,WADW,mBACH;AACN,YAAM,WAAW,EAAjB;;;AAGE,YAAI,KAAK,aAAL,CAAmB,eAAnB,CAAJ,EAAyC;AACvC,mBAAS,OAAT,GAAmB;AACjB,iBAAK;AADY,WAAnB;AAGD;;;AAGD,eAAO,MAAM,IAAN,CAAW,QAAX,EAAqB;AAC5B,gBAAM;AACJ,uBAAW,CAAC;AADR;AADsB,SAArB,CAAP;AAKH,OAjBU;AAkBX,qBAlBW,6BAkBO;AACjB,eAAO,MAAM,IAAN,CAAW;AAChB,mBAAS;AACP,iBAAK;AADE;AADO,SAAX,EAIJ,KAJI,EAAP;AAKD,OAxBW;AAyBZ,iBAzBY,yBAyBE;AACZ,eAAO,OAAO,IAAP,EAAP;AACD;AA3BW,KAAb;AA6BD;;0BAED,O,oBAAQ,O,EAAS;;AAEf,WAAO,IAAP,CAAY,cAAZ,EAA4B,OAA5B;;;AAGA,SAAK,OAAL,GAAe,EAAf;AACD,G;;0BAED,U,uBAAW,I,EAAM;AACf,WAAO,IAAP,CAAY,kBAAZ,EAAgC,KAAK,GAArC,EAA0C,CAAC,eAA3C;AACD,G;;0BAED,U,uBAAW,I,EAAM;;AAEf,WAAO,IAAP,CAAY,kBAAZ,EAAgC,KAAK,GAArC,EAA0C,CAAC,KAAK,OAAhD;AACD,G;;0BAED,U,uBAAW,I,EAAM;AACf,WAAO,IAAP,CAAY,cAAZ,EAA4B,KAAK,GAAjC;AACD,G;;;;;AAIH,eAAe,QAAQ,MAAR,CAAe,WAAf,EAA4B,CACzC,aADyC,CAA5B,EAGZ,SAHY,CAGF,WAHE,EAGW;AACtB,eAAa,6CADS;AAEtB,cAAY,CAAC,QAAD,EAAW,aAAX;AAFU,CAHX,CAAf,kH;;;;;;;;;;;ACnEA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,QAAQ,IAAI,MAAM,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAI,OAAO,QAAX,EAAqB;;;AAGnB,SAAO,OAAP,CAAe,OAAf,EAAwB,SAAS,gBAAT,GAA4B;AAClD,WAAO,MAAM,IAAN,CAAW;AAChB,WAAK,CAAC;AACJ,mBAAS;AACP,eAAK;AADE;AADL,OAAD,EAIF;AACD,eAAO,KAAK;AADX,OAJE;AADW,KAAX,CAAP;AASD,GAVD;AAWD;;AAED,OAAO,OAAP,CAAe;AACb,gBADa,uBACG,IADH,EACS;AACpB,UAAM,IAAN,EAAY,MAAZ;;;AAGA,QAAI,CAAC,OAAO,MAAP,EAAL,EAAsB;AACpB,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa;AACX,gBADW;AAEX,iBAAW,IAAI,IAAJ,EAFA;AAGX,aAAO,OAAO,MAAP,EAHI;AAIX,gBAAU,OAAO,IAAP,GAAc;AAJb,KAAb;AAMD,GAfY;AAgBb,gBAhBa,uBAgBG,MAhBH,EAgBW;AACtB,UAAM,MAAN,EAAc,MAAd;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,QAAI,mBAAgB,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnC,EAAoD;;AAElD,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb;AACD,GA1BY;AA2Bb,oBA3Ba,2BA2BO,MA3BP,EA2Be,YA3Bf,EA2B6B;AACxC,UAAM,MAAN,EAAc,MAAd;AACA,UAAM,YAAN,EAAoB,OAApB;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;;;AAGA,QAAI,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnB,EAAoC;AAClC,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb,EAAqB;AACnB,YAAM;AACJ,mBAAS;AADL;AADa,KAArB;AAKD,GA3CY;AA4Cb,oBA5Ca,2BA4CO,MA5CP,EA4Ce,UA5Cf,EA4C2B;AACtC,UAAM,MAAN,EAAc,MAAd;AACA,UAAM,UAAN,EAAkB,OAAlB;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,QAAI,mBAAgB,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnC,EAAoD;;AAEnD,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACA;;AAED,UAAM,MAAN,CAAa,MAAb,EAAqB;AACnB,YAAM;AACJ,iBAAS;AADL;AADa,KAArB;AAKD;AA3DY,CAAf,mH;;;;;;;;;;;ACtBA,SAAS,QAAT,QAAyB,sBAAzB;;AAEA,SAAS,EAAT,CAAY,MAAZ,CAAmB;AACjB,wBAAsB;AADL,CAAnB,kH;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;ACPA,OAAO,OAAP,MAAoB,SAApB;AACA,OAAO,aAAP,MAA0B,gBAA1B;AACA,OAAO,SAAP,MAAsB,2CAAtB;AACA,OAAO,uCAAP;;AAEA,QAAQ,MAAR,CAAe,cAAf,EAA+B,CAC7B,aAD6B,EAE7B,UAAU,IAFmB,EAG7B,aAH6B,CAA/B;;AAMA,SAAS,OAAT,GAAmB;AACjB,UAAQ,SAAR,CAAkB,QAAlB,EAA4B,CAAC,cAAD,CAA5B;AACD;;AAED,IAAI,OAAO,SAAX,EAAsB;AACpB,UAAQ,OAAR,CAAgB,QAAhB,EAA0B,EAA1B,CAA6B,aAA7B,EAA4C,OAA5C;AACD,CAFD,MAEO;AACL,UAAQ,OAAR,CAAgB,QAAhB,EAA0B,KAA1B,CAAgC,OAAhC;AACD,oH","file":"/app.js","sourcesContent":["\n      if (Meteor.isServer) return;\n\n      var templateUrl = \"/imports/components/todosList/todosList.html\";\n      var template = \"<header> <h1>Todo List ( {{$ctrl.incompleteCount}} )</h1> <label class=\\\"hide-completed\\\"> <input type=\\\"checkbox\\\" ng-model=\\\"$ctrl.hideCompleted\\\"> Hide Completed Tasks </label> <login-buttons></login-buttons> <form class=\\\"new-task\\\" ng-submit=\\\"$ctrl.addTask($ctrl.newTask)\\\" ng-show=\\\"$ctrl.currentUser\\\"> <input ng-model=\\\"$ctrl.newTask\\\" type=\\\"text\\\" name=\\\"text\\\" placeholder=\\\"Type to add new tasks\\\"> </form> </header> <ul> <li ng-repeat=\\\"task in $ctrl.tasks\\\" ng-class=\\\"{'checked': task.checked, 'private': task.private}\\\"> <button class=\\\"delete\\\" ng-click=\\\"$ctrl.removeTask(task)\\\">&times;</button> <input type=\\\"checkbox\\\" ng-checked=\\\"task.checked\\\" ng-click=\\\"$ctrl.setChecked(task)\\\" class=\\\"toggle-checked\\\"> <span class=\\\"text\\\"> <strong>{{task.username}}</strong> - {{task.text}} </span> <button class=\\\"toggle-private\\\" ng-click=\\\"$ctrl.setPrivate(task)\\\" ng-show=\\\"task.owner === $ctrl.currentUser._id\\\"> {{task.private == true ? \\\"Private\\\" : \\\"Public\\\"}} </button> </li> </ul> \";\n\n      angular.module('angular-templates')\n        .run(['$templateCache', function($templateCache) {\n          $templateCache.put(templateUrl, template);\n        }]);\n\n      module.exports = {};\n      module.exports.__esModule = true;\n      module.exports.default = templateUrl;\n    ","import angular from 'angular';\nimport angularMeteor from 'angular-meteor';\nimport { Tasks } from '../../api/tasks.js';\nimport { Meteor } from 'meteor/meteor';\r\nimport template from './todosList.html';\n\nclass TodosListCtrl {\n  constructor($scope) {\n    $scope.viewModel(this);\n\r\n    this.subscribe('tasks');\r\n    this.hideCompleted = false;\r\n\r\n    this.helpers({\n      tasks() {\n        const selector = {};\r\n\r\n          // If hide completed is checked, filter tasks\r\n          if (this.getReactively('hideCompleted')) {\r\n            selector.checked = {\r\n              $ne: true\r\n            };\r\n          }\r\n\r\n          // Show newest tasks at the top\r\n          return Tasks.find(selector, {\r\n          sort: {\n            createdAt: -1\n          }\n        });\n      },\r\n      incompleteCount() {\r\n       return Tasks.find({\r\n         checked: {\r\n           $ne: true\r\n         }\r\n       }).count();\r\n     },\r\n     currentUser() {\r\n       return Meteor.user();\r\n     }\r\n    })\r\n  }\r\n\n  addTask(newTask) {\n    // Insert a task into the collection\r\n    Meteor.call('tasks.insert', newTask);\r\n\r\n    // Clear form\n    this.newTask = '';\n  }\r\n\r\n  setPrivate(task) {\r\n    Meteor.call('tasks.setPrivate', task._id, !task.private);\r\n  }\r\n\n  setChecked(task) {\n    // Set the checked property to the opposite of its current value\n    Meteor.call('tasks.setChecked', task._id, !task.checked);\r\n  }\n\n  removeTask(task) {\n    Meteor.call('tasks.remove', task._id);\r\n  }\n\n}\n\nexport default angular.module('todosList', [\n  angularMeteor\n])\n  .component('todosList', {\n    templateUrl: 'imports/components/todosList/todosList.html',\n    controller: ['$scope', TodosListCtrl]\n  });\n","import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\n\r\nif (Meteor.isServer) {\r\n  // This code only runs on the server\r\n  // Only publish tasks that are public or belong to the current user\r\n  Meteor.publish('tasks', function tasksPublication() {\r\n    return Tasks.find({\r\n      $or: [{\r\n        private: {\r\n          $ne: true\r\n        }\r\n      }, {\r\n        owner: this.userId\r\n      }, ],\r\n    });\r\n  });\r\n}\r\n\r\nMeteor.methods({\r\n  'tasks.insert' (text) {\r\n    check(text, String);\r\n\r\n    // Make sure the user is logged in before inserting a task\r\n    if (!Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      owner: Meteor.userId(),\r\n      username: Meteor.user().username,\r\n    });\r\n  },\r\n  'tasks.remove' (taskId) {\r\n    check(taskId, String);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n      // If the task is private, make sure only the owner can delete it\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.remove(taskId);\r\n  },\r\n  'tasks.setPrivate' (taskId, setToPrivate) {\r\n    check(taskId, String);\r\n    check(setToPrivate, Boolean);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n\r\n    // Make sure only the task owner can make a task private\r\n    if (task.owner !== Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.update(taskId, {\r\n      $set: {\r\n        private: setToPrivate\r\n      }\r\n    });\r\n  },\r\n  'tasks.setChecked' (taskId, setChecked) {\r\n    check(taskId, String);\r\n    check(setChecked, Boolean);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n     // If the task is private, make sure only the owner can check it off\r\n     throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.update(taskId, {\r\n      $set: {\r\n        checked: setChecked\r\n      }\r\n    });\r\n  },\r\n});\r\n","import { Accounts } from 'meteor/accounts-base';\r\n\r\nAccounts.ui.config({\r\n  passwordSignupFields: 'USERNAME_ONLY',\r\n});\r\n","\n            Meteor.startup(function() {\n              var attrs = {};\n              for (var prop in attrs) {\n                document.body.setAttribute(prop, attrs[prop]);\n              }\n            });\n          ","import angular from 'angular';\nimport angularMeteor from 'angular-meteor';\nimport todosList from '../imports/components/todosList/todosList';\nimport '../imports/startup/accounts-config.js';\n\nangular.module('simple-todos', [\n  angularMeteor,\n  todosList.name,\n  'accounts.ui'\n]);\n\nfunction onReady() {\n  angular.bootstrap(document, ['simple-todos']);\n}\n\nif (Meteor.isCordova) {\n  angular.element(document).on('deviceready', onReady);\n} else {\n  angular.element(document).ready(onReady);\n}\n"]}