[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"tasks.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// imports/api/tasks.js                                                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({Tasks:function(){return Tasks}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n                                                                                                                     // 2\n                                                                                                                     // 3\n                                                                                                                     //\nvar Tasks = new Mongo.Collection('tasks');                                                                           // 5\n                                                                                                                     //\nif (Meteor.isServer) {                                                                                               // 7\n  // This code only runs on the server                                                                               //\n  // Only publish tasks that are public or belong to the current user                                                //\n  Meteor.publish('tasks', function tasksPublication() {                                                              // 10\n    return Tasks.find({                                                                                              // 11\n      $or: [{                                                                                                        // 12\n        'private': {                                                                                                 // 13\n          $ne: true                                                                                                  // 14\n        }                                                                                                            // 13\n      }, {                                                                                                           // 12\n        owner: this.userId                                                                                           // 17\n      }]                                                                                                             // 16\n    });                                                                                                              // 11\n  });                                                                                                                // 20\n}                                                                                                                    // 21\n                                                                                                                     //\nMeteor.methods({                                                                                                     // 23\n  'tasks.insert': function tasksInsert(text) {                                                                       // 24\n    check(text, String);                                                                                             // 25\n                                                                                                                     //\n    // Make sure the user is logged in before inserting a task                                                       //\n    if (!Meteor.userId()) {                                                                                          // 28\n      throw new Meteor.Error('not-authorized');                                                                      // 29\n    }                                                                                                                // 30\n                                                                                                                     //\n    Tasks.insert({                                                                                                   // 32\n      text: text,                                                                                                    // 33\n      createdAt: new Date(),                                                                                         // 34\n      owner: Meteor.userId(),                                                                                        // 35\n      username: Meteor.user().username                                                                               // 36\n    });                                                                                                              // 32\n  },                                                                                                                 // 38\n  'tasks.remove': function tasksRemove(taskId) {                                                                     // 39\n    check(taskId, String);                                                                                           // 40\n                                                                                                                     //\n    var task = Tasks.findOne(taskId);                                                                                // 42\n    if (task['private'] && task.owner !== Meteor.userId()) {                                                         // 43\n      // If the task is private, make sure only the owner can delete it                                              //\n      throw new Meteor.Error('not-authorized');                                                                      // 45\n    }                                                                                                                // 46\n                                                                                                                     //\n    Tasks.remove(taskId);                                                                                            // 48\n  },                                                                                                                 // 49\n  'tasks.setPrivate': function tasksSetPrivate(taskId, setToPrivate) {                                               // 50\n    check(taskId, String);                                                                                           // 51\n    check(setToPrivate, Boolean);                                                                                    // 52\n                                                                                                                     //\n    var task = Tasks.findOne(taskId);                                                                                // 54\n                                                                                                                     //\n    // Make sure only the task owner can make a task private                                                         //\n    if (task.owner !== Meteor.userId()) {                                                                            // 57\n      throw new Meteor.Error('not-authorized');                                                                      // 58\n    }                                                                                                                // 59\n                                                                                                                     //\n    Tasks.update(taskId, {                                                                                           // 61\n      $set: {                                                                                                        // 62\n        'private': setToPrivate                                                                                      // 63\n      }                                                                                                              // 62\n    });                                                                                                              // 61\n  },                                                                                                                 // 66\n  'tasks.setChecked': function tasksSetChecked(taskId, setChecked) {                                                 // 67\n    check(taskId, String);                                                                                           // 68\n    check(setChecked, Boolean);                                                                                      // 69\n                                                                                                                     //\n    var task = Tasks.findOne(taskId);                                                                                // 71\n    if (task['private'] && task.owner !== Meteor.userId()) {                                                         // 72\n      // If the task is private, make sure only the owner can check it off                                           //\n      throw new Meteor.Error('not-authorized');                                                                      // 74\n    }                                                                                                                // 75\n                                                                                                                     //\n    Tasks.update(taskId, {                                                                                           // 77\n      $set: {                                                                                                        // 78\n        checked: setChecked                                                                                          // 79\n      }                                                                                                              // 78\n    });                                                                                                              // 77\n  }                                                                                                                  // 82\n});                                                                                                                  // 23\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"server\":{\"main.js\":[\"meteor/meteor\",\"../imports/api/tasks.js\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// server/main.js                                                                                                    //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});module.import('../imports/api/tasks.js');\n                                                                                                                     // 2\n                                                                                                                     //\nMeteor.startup(function () {                                                                                         // 4\n  // code to run on server at startup                                                                                //\n});                                                                                                                  // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\",\".html\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/api/tasks.js","/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,QAAQ,IAAI,MAAM,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAI,OAAO,QAAX,EAAqB;;;AAGnB,SAAO,OAAP,CAAe,OAAf,EAAwB,SAAS,gBAAT,GAA4B;AAClD,WAAO,MAAM,IAAN,CAAW;AAChB,WAAK,CAAC;AACJ,mBAAS;AACP,eAAK;AADE;AADL,OAAD,EAIF;AACD,eAAO,KAAK;AADX,OAJE;AADW,KAAX,CAAP;AASD,GAVD;AAWD;;AAED,OAAO,OAAP,CAAe;AACb,gBADa,uBACG,IADH,EACS;AACpB,UAAM,IAAN,EAAY,MAAZ;;;AAGA,QAAI,CAAC,OAAO,MAAP,EAAL,EAAsB;AACpB,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa;AACX,gBADW;AAEX,iBAAW,IAAI,IAAJ,EAFA;AAGX,aAAO,OAAO,MAAP,EAHI;AAIX,gBAAU,OAAO,IAAP,GAAc;AAJb,KAAb;AAMD,GAfY;AAgBb,gBAhBa,uBAgBG,MAhBH,EAgBW;AACtB,UAAM,MAAN,EAAc,MAAd;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,QAAI,mBAAgB,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnC,EAAoD;;AAElD,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb;AACD,GA1BY;AA2Bb,oBA3Ba,2BA2BO,MA3BP,EA2Be,YA3Bf,EA2B6B;AACxC,UAAM,MAAN,EAAc,MAAd;AACA,UAAM,YAAN,EAAoB,OAApB;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;;;AAGA,QAAI,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnB,EAAoC;AAClC,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb,EAAqB;AACnB,YAAM;AACJ,mBAAS;AADL;AADa,KAArB;AAKD,GA3CY;AA4Cb,oBA5Ca,2BA4CO,MA5CP,EA4Ce,UA5Cf,EA4C2B;AACtC,UAAM,MAAN,EAAc,MAAd;AACA,UAAM,UAAN,EAAkB,OAAlB;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACG,QAAI,mBAAgB,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnC,EAAoD;;AAElD,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEJ,UAAM,MAAN,CAAa,MAAb,EAAqB;AACnB,YAAM;AACJ,iBAAS;AADL;AADa,KAArB;AAKD;AA3DY,CAAf,yH;;;;;;;;;;;ACtBA,SAAS,MAAT,QAAuB,eAAvB;AACA,OAAO,yBAAP;;AAEA,OAAO,OAAP,CAAe,YAAM;;AAEpB,CAFD,wH","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\n\r\nif (Meteor.isServer) {\r\n  // This code only runs on the server\r\n  // Only publish tasks that are public or belong to the current user\r\n  Meteor.publish('tasks', function tasksPublication() {\r\n    return Tasks.find({\r\n      $or: [{\r\n        private: {\r\n          $ne: true\r\n        }\r\n      }, {\r\n        owner: this.userId\r\n      }, ],\r\n    });\r\n  });\r\n}\r\n\r\nMeteor.methods({\r\n  'tasks.insert' (text) {\r\n    check(text, String);\r\n\r\n    // Make sure the user is logged in before inserting a task\r\n    if (!Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      owner: Meteor.userId(),\r\n      username: Meteor.user().username,\r\n    });\r\n  },\r\n  'tasks.remove' (taskId) {\r\n    check(taskId, String);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n      // If the task is private, make sure only the owner can delete it\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.remove(taskId);\r\n  },\r\n  'tasks.setPrivate' (taskId, setToPrivate) {\r\n    check(taskId, String);\r\n    check(setToPrivate, Boolean);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n\r\n    // Make sure only the task owner can make a task private\r\n    if (task.owner !== Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.update(taskId, {\r\n      $set: {\r\n        private: setToPrivate\r\n      }\r\n    });\r\n  },\r\n  'tasks.setChecked' (taskId, setChecked) {\r\n    check(taskId, String);\r\n    check(setChecked, Boolean);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n       if (task.private && task.owner !== Meteor.userId()) {\r\n         // If the task is private, make sure only the owner can check it off\r\n         throw new Meteor.Error('not-authorized');\r\n       }\r\n\r\n    Tasks.update(taskId, {\r\n      $set: {\r\n        checked: setChecked\r\n      }\r\n    });\r\n  },\r\n});\r\n","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/tasks.js';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]