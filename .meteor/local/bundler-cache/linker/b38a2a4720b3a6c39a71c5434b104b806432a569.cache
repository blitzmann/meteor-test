[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"components\":{\"todosList\":{\"todosLists.test.js\":[\"angular-mocks\",\"meteor/meteor\",\"meteor/practicalmeteor:chai\",\"meteor/practicalmeteor:sinon\",\"../todosList\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// imports/components/todosList/todosLists.test.js                                 //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\nmodule.import('angular-mocks');var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var assert;module.import('meteor/practicalmeteor:chai',{\"assert\":function(v){assert=v}});var sinon;module.import('meteor/practicalmeteor:sinon',{\"sinon\":function(v){sinon=v}});var todosList;module.import('../todosList',{\"default\":function(v){todosList=v}});/* eslint-env mocha */\n                                                                                   //\n                                                                                   // 3\n                                                                                   // 4\n                                                                                   // 5\n                                                                                   // 6\n                                                                                   // 7\n                                                                                   //\ndescribe('todosList', function () {                                                // 9\n  var element;                                                                     // 10\n                                                                                   //\n  beforeEach(function () {                                                         // 12\n    var $compile;                                                                  // 13\n    var $rootScope;                                                                // 14\n                                                                                   //\n    //window.module(todosList.name);                                               //\n                                                                                   //\n    inject(function (_$compile_, _$rootScope_) {                                   // 18\n      $compile = _$compile_;                                                       // 19\n      $rootScope = _$rootScope_;                                                   // 20\n    });                                                                            // 21\n                                                                                   //\n    element = $compile('<todos-list></todos-list>')($rootScope.$new(true));        // 23\n    $rootScope.$digest();                                                          // 24\n  });                                                                              // 25\n                                                                                   //\n  describe('component', function () {                                              // 27\n    it('should be showing incomplete tasks count', function () {                   // 28\n      assert.include(element[0].querySelector('h1').innerHTML, '0');               // 29\n    });                                                                            // 30\n  });                                                                              // 31\n                                                                                   //\n  describe('controller', function () {                                             // 33\n    describe('addTask', function () {                                              // 34\n      var controller;                                                              // 35\n      var newTask = 'Be more fabolous';                                            // 36\n                                                                                   //\n      beforeEach(function () {                                                     // 38\n        sinon.stub(Meteor, 'call');                                                // 39\n        controller = element.controller('todosList');                              // 40\n        controller.newTask = 'Be fabolous';                                        // 41\n        controller.addTask(newTask);                                               // 42\n      });                                                                          // 43\n                                                                                   //\n      afterEach(function () {                                                      // 45\n        Meteor.call.restore();                                                     // 46\n      });                                                                          // 47\n                                                                                   //\n      it('should call tasks.insert method', function () {                          // 49\n        sinon.assert.calledOnce(Meteor.call);                                      // 50\n        sinon.assert.calledWith(Meteor.call, 'tasks.insert', newTask);             // 51\n      });                                                                          // 52\n                                                                                   //\n      it('should reset newTask', function () {                                     // 54\n        assert.equal(controller.newTask, '');                                      // 55\n      });                                                                          // 56\n    });                                                                            // 57\n  });                                                                              // 58\n});                                                                                // 60\n/////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"api\":{\"tasks.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// imports/api/tasks.js                                                            //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\nmodule.export({Tasks:function(){return Tasks}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n                                                                                   // 2\n                                                                                   // 3\n                                                                                   //\nvar Tasks = new Mongo.Collection('tasks');                                         // 5\n                                                                                   //\nif (Meteor.isServer) {                                                             // 7\n  // This code only runs on the server                                             //\n  // Only publish tasks that are public or belong to the current user              //\n  Meteor.publish('tasks', function () {                                            // 10\n    function tasksPublication() {                                                  // 10\n      return Tasks.find({                                                          // 11\n        $or: [{                                                                    // 12\n          'private': {                                                             // 13\n            $ne: true                                                              // 14\n          }                                                                        // 13\n        }, {                                                                       // 12\n          owner: this.userId                                                       // 17\n        }]                                                                         // 16\n      });                                                                          // 11\n    }                                                                              // 20\n                                                                                   //\n    return tasksPublication;                                                       // 10\n  }());                                                                            // 10\n}                                                                                  // 21\n                                                                                   //\nMeteor.methods({                                                                   // 23\n  'tasks.insert': function () {                                                    // 24\n    function tasksInsert(text) {                                                   // 23\n      check(text, String);                                                         // 25\n                                                                                   //\n      // Make sure the user is logged in before inserting a task                   //\n      if (!Meteor.userId()) {                                                      // 28\n        throw new Meteor.Error('not-authorized');                                  // 29\n      }                                                                            // 30\n                                                                                   //\n      Tasks.insert({                                                               // 32\n        text: text,                                                                // 33\n        createdAt: new Date(),                                                     // 34\n        owner: Meteor.userId(),                                                    // 35\n        username: Meteor.user().username                                           // 36\n      });                                                                          // 32\n    }                                                                              // 38\n                                                                                   //\n    return tasksInsert;                                                            // 23\n  }(),                                                                             // 23\n  'tasks.remove': function () {                                                    // 39\n    function tasksRemove(taskId) {                                                 // 23\n      check(taskId, String);                                                       // 40\n                                                                                   //\n      var task = Tasks.findOne(taskId);                                            // 42\n      if (task['private'] && task.owner !== Meteor.userId()) {                     // 43\n        // If the task is private, make sure only the owner can delete it          //\n        throw new Meteor.Error('not-authorized');                                  // 45\n      }                                                                            // 46\n                                                                                   //\n      Tasks.remove(taskId);                                                        // 48\n    }                                                                              // 49\n                                                                                   //\n    return tasksRemove;                                                            // 23\n  }(),                                                                             // 23\n  'tasks.setPrivate': function () {                                                // 50\n    function tasksSetPrivate(taskId, setToPrivate) {                               // 23\n      check(taskId, String);                                                       // 51\n      check(setToPrivate, Boolean);                                                // 52\n                                                                                   //\n      var task = Tasks.findOne(taskId);                                            // 54\n                                                                                   //\n      // Make sure only the task owner can make a task private                     //\n      if (task.owner !== Meteor.userId()) {                                        // 57\n        throw new Meteor.Error('not-authorized');                                  // 58\n      }                                                                            // 59\n                                                                                   //\n      Tasks.update(taskId, {                                                       // 61\n        $set: {                                                                    // 62\n          'private': setToPrivate                                                  // 63\n        }                                                                          // 62\n      });                                                                          // 61\n    }                                                                              // 66\n                                                                                   //\n    return tasksSetPrivate;                                                        // 23\n  }(),                                                                             // 23\n  'tasks.setChecked': function () {                                                // 67\n    function tasksSetChecked(taskId, setChecked) {                                 // 23\n      check(taskId, String);                                                       // 68\n      check(setChecked, Boolean);                                                  // 69\n                                                                                   //\n      var task = Tasks.findOne(taskId);                                            // 71\n      if (task['private'] && task.owner !== Meteor.userId()) {                     // 72\n        // If the task is private, make sure only the owner can check it off       //\n        throw new Meteor.Error('not-authorized');                                  // 74\n      }                                                                            // 75\n                                                                                   //\n      Tasks.update(taskId, {                                                       // 77\n        $set: {                                                                    // 78\n          checked: setChecked                                                      // 79\n        }                                                                          // 78\n      });                                                                          // 77\n    }                                                                              // 82\n                                                                                   //\n    return tasksSetChecked;                                                        // 23\n  }()                                                                              // 23\n});                                                                                // 23\n/////////////////////////////////////////////////////////////////////////////////////\n\n}],\"tasks.test.js\":[\"meteor/meteor\",\"meteor/random\",\"meteor/practicalmeteor:chai\",\"./tasks.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// imports/api/tasks.test.js                                                       //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Random;module.import('meteor/random',{\"Random\":function(v){Random=v}});var assert;module.import('meteor/practicalmeteor:chai',{\"assert\":function(v){assert=v}});var Tasks;module.import('./tasks.js',{\"Tasks\":function(v){Tasks=v}});/* eslint-env mocha */\n                                                                                   //\n                                                                                   // 3\n                                                                                   // 4\n                                                                                   // 5\n                                                                                   // 6\n                                                                                   //\nif (Meteor.isServer) {                                                             // 8\n  describe('Tasks', function () {                                                  // 9\n    describe('methods', function () {                                              // 10\n      var userId = Random.id();                                                    // 11\n      var taskId = void 0;                                                         // 12\n                                                                                   //\n      beforeEach(function () {                                                     // 14\n        Tasks.remove({});                                                          // 15\n        taskId = Tasks.insert({                                                    // 16\n          text: 'test task',                                                       // 17\n          createdAt: new Date(),                                                   // 18\n          owner: userId,                                                           // 19\n          username: 'tmeasday'                                                     // 20\n        });                                                                        // 16\n      });                                                                          // 22\n                                                                                   //\n      it('can delete owned task', function () {                                    // 24\n        // Find the internal implementation of the task method so we can           //\n        // test it in isolation                                                    //\n        var deleteTask = Meteor.server.method_handlers['tasks.remove'];            // 27\n                                                                                   //\n        // Set up a fake method invocation that looks like what the method expects\n        var invocation = {                                                         // 30\n          userId: userId                                                           // 31\n        };                                                                         // 30\n                                                                                   //\n        // Run the method with `this` set to the fake invocation                   //\n        deleteTask.apply(invocation, [taskId]);                                    // 35\n                                                                                   //\n        // Verify that the method does what we expected                            //\n        assert.equal(Tasks.find().count(), 0);                                     // 38\n      });                                                                          // 39\n    });                                                                            // 40\n  });                                                                              // 41\n}                                                                                  // 42\n/////////////////////////////////////////////////////////////////////////////////////\n\n}]}}},{\"extensions\":[\".js\",\".json\",\".html\",\".css\"]});\nrequire(\"./imports/components/todosList/todosLists.test.js\");\nrequire(\"./imports/api/tasks.test.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/components/todosList/todosLists.test.js","/imports/api/tasks.js","/imports/api/tasks.test.js"],"names":[],"mappings":";;;;;;;;;;AAEA,OAAO,eAAP;AACA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,MAAT,QAAuB,6BAAvB;AACA,SAAS,KAAT,QAAsB,8BAAtB;AACA,OAAO,SAAP,MAAsB,cAAtB;;AAEA,SAAS,WAAT,EAAsB,YAAW;AAC/B,MAAI,OAAJ;;AAEA,aAAW,YAAW;AACpB,QAAI,QAAJ;AACA,QAAI,UAAJ;;;;AAIA,WAAO,UAAS,UAAT,EAAqB,YAArB,EAAkC;AACvC,iBAAW,UAAX;AACA,mBAAa,YAAb;AACD,KAHD;;AAKA,cAAU,SAAS,2BAAT,EAAsC,WAAW,IAAX,CAAgB,IAAhB,CAAtC,CAAV;AACA,eAAW,OAAX;AACD,GAbD;;AAeA,WAAS,WAAT,EAAsB,YAAW;AAC/B,OAAG,0CAAH,EAA+C,YAAW;AACxD,aAAO,OAAP,CAAe,QAAQ,CAAR,EAAW,aAAX,CAAyB,IAAzB,EAA+B,SAA9C,EAAyD,GAAzD;AACD,KAFD;AAGD,GAJD;;AAMA,WAAS,YAAT,EAAuB,YAAW;AAChC,aAAS,SAAT,EAAoB,YAAW;AAC7B,UAAI,UAAJ;AACA,UAAI,UAAU,kBAAd;;AAEA,iBAAW,YAAM;AACf,cAAM,IAAN,CAAW,MAAX,EAAmB,MAAnB;AACA,qBAAa,QAAQ,UAAR,CAAmB,WAAnB,CAAb;AACA,mBAAW,OAAX,GAAqB,aAArB;AACA,mBAAW,OAAX,CAAmB,OAAnB;AACD,OALD;;AAOA,gBAAU,YAAM;AACd,eAAO,IAAP,CAAY,OAAZ;AACD,OAFD;;AAIA,SAAG,iCAAH,EAAsC,YAAW;AAC/C,cAAM,MAAN,CAAa,UAAb,CAAwB,OAAO,IAA/B;AACA,cAAM,MAAN,CAAa,UAAb,CAAwB,OAAO,IAA/B,EAAqC,cAArC,EAAqD,OAArD;AACD,OAHD;;AAKA,SAAG,sBAAH,EAA2B,YAAW;AACpC,eAAO,KAAP,CAAa,WAAW,OAAxB,EAAiC,EAAjC;AACD,OAFD;AAGD,KAvBD;AAwBD,GAzBD;AA2BD,CAnDD,uF;;;;;;;;;;;ACRA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,QAAQ,IAAI,MAAM,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAI,OAAO,QAAX,EAAqB;;;AAGnB,SAAO,OAAP,CAAe,OAAf;AAAwB,aAAS,gBAAT,GAA4B;AAClD,aAAO,MAAM,IAAN,CAAW;AAChB,aAAK,CAAC;AACJ,qBAAS;AACP,iBAAK;AADE;AADL,SAAD,EAIF;AACD,iBAAO,KAAK;AADX,SAJE;AADW,OAAX,CAAP;AASD;;AAVD,WAAiC,gBAAjC;AAAA;AAWD;;AAED,OAAO,OAAP,CAAe;AACb,gBADa;AAAA,yBACG,IADH,EACS;AACpB,YAAM,IAAN,EAAY,MAAZ;;;AAGA,UAAI,CAAC,OAAO,MAAP,EAAL,EAAsB;AACpB,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,YAAM,MAAN,CAAa;AACX,kBADW;AAEX,mBAAW,IAAI,IAAJ,EAFA;AAGX,eAAO,OAAO,MAAP,EAHI;AAIX,kBAAU,OAAO,IAAP,GAAc;AAJb,OAAb;AAMD;;AAfY;AAAA;AAgBb,gBAhBa;AAAA,yBAgBG,MAhBH,EAgBW;AACtB,YAAM,MAAN,EAAc,MAAd;;AAEA,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,UAAI,mBAAgB,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnC,EAAoD;;AAElD,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,YAAM,MAAN,CAAa,MAAb;AACD;;AA1BY;AAAA;AA2Bb,oBA3Ba;AAAA,6BA2BO,MA3BP,EA2Be,YA3Bf,EA2B6B;AACxC,YAAM,MAAN,EAAc,MAAd;AACA,YAAM,YAAN,EAAoB,OAApB;;AAEA,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;;;AAGA,UAAI,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnB,EAAoC;AAClC,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,YAAM,MAAN,CAAa,MAAb,EAAqB;AACnB,cAAM;AACJ,qBAAS;AADL;AADa,OAArB;AAKD;;AA3CY;AAAA;AA4Cb,oBA5Ca;AAAA,6BA4CO,MA5CP,EA4Ce,UA5Cf,EA4C2B;AACtC,YAAM,MAAN,EAAc,MAAd;AACA,YAAM,UAAN,EAAkB,OAAlB;;AAEA,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,UAAI,mBAAgB,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnC,EAAoD;;AAEnD,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACA;;AAED,YAAM,MAAN,CAAa,MAAb,EAAqB;AACnB,cAAM;AACJ,mBAAS;AADL;AADa,OAArB;AAKD;;AA3DY;AAAA;AAAA,CAAf,uF;;;;;;;;;;;;;ACpBA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,MAAT,QAAuB,6BAAvB;AACA,SAAS,KAAT,QAAsB,YAAtB;;AAEA,IAAI,OAAO,QAAX,EAAqB;AACnB,WAAS,OAAT,EAAkB,YAAM;AACtB,aAAS,SAAT,EAAoB,YAAM;AACxB,UAAM,SAAS,OAAO,EAAP,EAAf;AACA,UAAI,eAAJ;;AAEA,iBAAW,YAAM;AACf,cAAM,MAAN,CAAa,EAAb;AACA,iBAAS,MAAM,MAAN,CAAa;AACpB,gBAAM,WADc;AAEpB,qBAAW,IAAI,IAAJ,EAFS;AAGpB,iBAAO,MAHa;AAIpB,oBAAU;AAJU,SAAb,CAAT;AAMD,OARD;;AAUA,SAAG,uBAAH,EAA4B,YAAM;;;AAGhC,YAAM,aAAa,OAAO,MAAP,CAAc,eAAd,CAA8B,cAA9B,CAAnB;;;AAGA,YAAM,aAAa;AACjB;AADiB,SAAnB;;;AAKA,mBAAW,KAAX,CAAiB,UAAjB,EAA6B,CAAC,MAAD,CAA7B;;;AAGA,eAAO,KAAP,CAAa,MAAM,IAAN,GAAa,KAAb,EAAb,EAAmC,CAAnC;AACD,OAfD;AAgBD,KA9BD;AA+BD,GAhCD;AAiCD,wF","file":"/app.js","sourcesContent":["/* eslint-env mocha */\r\n\r\nimport 'angular-mocks';\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { assert } from 'meteor/practicalmeteor:chai';\r\nimport { sinon } from 'meteor/practicalmeteor:sinon';\r\nimport todosList from '../todosList';\r\n\r\ndescribe('todosList', function() {\r\n  var element;\r\n\r\n  beforeEach(function() {\r\n    var $compile;\r\n    var $rootScope;\r\n\r\n    //window.module(todosList.name);\r\n\r\n    inject(function(_$compile_, _$rootScope_){\r\n      $compile = _$compile_;\r\n      $rootScope = _$rootScope_;\r\n    });\r\n\r\n    element = $compile('<todos-list></todos-list>')($rootScope.$new(true));\r\n    $rootScope.$digest();\r\n  });\r\n\r\n  describe('component', function() {\r\n    it('should be showing incomplete tasks count', function() {\r\n      assert.include(element[0].querySelector('h1').innerHTML, '0');\r\n    });\r\n  });\r\n\r\n  describe('controller', function() {\r\n    describe('addTask', function() {\r\n      var controller;\r\n      var newTask = 'Be more fabolous';\r\n\r\n      beforeEach(() => {\r\n        sinon.stub(Meteor, 'call');\r\n        controller = element.controller('todosList');\r\n        controller.newTask = 'Be fabolous';\r\n        controller.addTask(newTask);\r\n      });\r\n\r\n      afterEach(() => {\r\n        Meteor.call.restore();\r\n      });\r\n\r\n      it('should call tasks.insert method', function() {\r\n        sinon.assert.calledOnce(Meteor.call);\r\n        sinon.assert.calledWith(Meteor.call, 'tasks.insert', newTask);\r\n      });\r\n\r\n      it('should reset newTask', function() {\r\n        assert.equal(controller.newTask, '');\r\n      });\r\n    });\r\n  });\r\n\r\n})\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\n\r\nif (Meteor.isServer) {\r\n  // This code only runs on the server\r\n  // Only publish tasks that are public or belong to the current user\r\n  Meteor.publish('tasks', function tasksPublication() {\r\n    return Tasks.find({\r\n      $or: [{\r\n        private: {\r\n          $ne: true\r\n        }\r\n      }, {\r\n        owner: this.userId\r\n      }, ],\r\n    });\r\n  });\r\n}\r\n\r\nMeteor.methods({\r\n  'tasks.insert' (text) {\r\n    check(text, String);\r\n\r\n    // Make sure the user is logged in before inserting a task\r\n    if (!Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      owner: Meteor.userId(),\r\n      username: Meteor.user().username,\r\n    });\r\n  },\r\n  'tasks.remove' (taskId) {\r\n    check(taskId, String);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n      // If the task is private, make sure only the owner can delete it\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.remove(taskId);\r\n  },\r\n  'tasks.setPrivate' (taskId, setToPrivate) {\r\n    check(taskId, String);\r\n    check(setToPrivate, Boolean);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n\r\n    // Make sure only the task owner can make a task private\r\n    if (task.owner !== Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.update(taskId, {\r\n      $set: {\r\n        private: setToPrivate\r\n      }\r\n    });\r\n  },\r\n  'tasks.setChecked' (taskId, setChecked) {\r\n    check(taskId, String);\r\n    check(setChecked, Boolean);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n     // If the task is private, make sure only the owner can check it off\r\n     throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.update(taskId, {\r\n      $set: {\r\n        checked: setChecked\r\n      }\r\n    });\r\n  },\r\n});\r\n","/* eslint-env mocha */\r\n\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { Random } from 'meteor/random';\r\nimport { assert } from 'meteor/practicalmeteor:chai';\r\nimport { Tasks } from './tasks.js';\r\n\r\nif (Meteor.isServer) {\r\n  describe('Tasks', () => {\r\n    describe('methods', () => {\r\n      const userId = Random.id();\r\n      let taskId;\r\n\r\n      beforeEach(() => {\r\n        Tasks.remove({});\r\n        taskId = Tasks.insert({\r\n          text: 'test task',\r\n          createdAt: new Date(),\r\n          owner: userId,\r\n          username: 'tmeasday',\r\n        });\r\n      });\r\n\r\n      it('can delete owned task', () => {\r\n        // Find the internal implementation of the task method so we can\r\n        // test it in isolation\r\n        const deleteTask = Meteor.server.method_handlers['tasks.remove'];\r\n\r\n        // Set up a fake method invocation that looks like what the method expects\r\n        const invocation = {\r\n          userId\r\n        };\r\n\r\n        // Run the method with `this` set to the fake invocation\r\n        deleteTask.apply(invocation, [taskId]);\r\n\r\n        // Verify that the method does what we expected\r\n        assert.equal(Tasks.find().count(), 0);\r\n      });\r\n    });\r\n  });\r\n}\n"]}}]