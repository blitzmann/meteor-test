{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/practicalmeteor:mocha/test/http.meta.2.js","filenameRelative":"/packages/practicalmeteor:mocha/test/http.meta.2.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/practicalmeteor:mocha/test/http.meta.2.js.map","sourceFileName":"/packages/practicalmeteor:mocha/test/http.meta.2.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"http.meta.2"},"ignored":false,"code":"var http = require('http');\n\nvar PORT = 8899;\n\nvar server = http.createServer(function (req, res) {\n  var accept = req.headers.accept || '',\n      json = ~accept.indexOf('json');\n\n  switch (req.url) {\n    case '/':\n      res.end('hello');\n      break;\n    case '/users':\n      if (json) {\n        res.end('[\"tobi\",\"loki\",\"jane\"]');\n      } else {\n        res.end('tobi, loki, jane');\n      }\n      break;\n  }\n});\n\nfunction get(url) {\n  var fields,\n      expected,\n      header = {};\n\n  function request(done) {\n    http.get({ path: url, port: PORT, headers: header }, function (res) {\n      var buf = '';\n      res.should.have.property('statusCode', 200);\n      res.setEncoding('utf8');\n      res.on('data', function (chunk) {\n        buf += chunk;\n      });\n      res.on('end', function () {\n        buf.should.equal(expected);\n        done();\n      });\n    });\n  }\n\n  return {\n    set: function () {\n      function set(field, val) {\n        header[field] = val;\n        return this;\n      }\n\n      return set;\n    }(),\n\n    should: {\n      respond: function () {\n        function respond(body) {\n          fields = Object.keys(header).map(function (field) {\n            return field + ': ' + header[field];\n          }).join(', ');\n\n          expected = body;\n          describe('GET ' + url, function () {\n            this.timeout(500);\n            if (fields) {\n              describe('when given ' + fields, function () {\n                it('should respond with \"' + body + '\"', request);\n              });\n            } else {\n              it('should respond with \"' + body + '\"', request);\n            }\n          });\n        }\n\n        return respond;\n      }()\n    }\n  };\n}\n\ndescribe('http server', function () {\n\n  before(function (done) {\n    server.listen(PORT, done);\n  });\n\n  after(function () {\n    server.close();\n  });\n\n  get('/').should.respond('hello');\n\n  get('/users').should.respond('tobi, loki, jane');\n\n  get('/users').set('Accept', 'application/json').should.respond('[\"tobi\",\"loki\",\"jane\"]');\n});","ast":null,"map":{"version":3,"sources":["/packages/practicalmeteor:mocha/test/http.meta.2.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,IAAI,OAAO,IAAX;;AAEA,IAAI,SAAS,KAAK,YAAL,CAAkB,UAAS,GAAT,EAAc,GAAd,EAAkB;AAC/C,MAAI,SAAS,IAAI,OAAJ,CAAY,MAAZ,IAAsB,EAAnC;AAAA,MACI,OAAO,CAAC,OAAO,OAAP,CAAe,MAAf,CADZ;;AAGA,UAAQ,IAAI,GAAZ;AACE,SAAK,GAAL;AACE,UAAI,GAAJ,CAAQ,OAAR;AACA;AACF,SAAK,QAAL;AACE,UAAI,IAAJ,EAAU;AACR,YAAI,GAAJ,CAAQ,wBAAR;AACD,OAFD,MAEO;AACL,YAAI,GAAJ,CAAQ,kBAAR;AACD;AACD;AAVJ;AAYD,CAhBY,CAAb;;AAkBA,SAAS,GAAT,CAAa,GAAb,EAAkB;AAChB,MAAI,MAAJ;AAAA,MACI,QADJ;AAAA,MAEI,SAAS,EAFb;;AAIA,WAAS,OAAT,CAAiB,IAAjB,EAAuB;AACrB,SAAK,GAAL,CAAS,EAAE,MAAM,GAAR,EAAa,MAAM,IAAnB,EAAyB,SAAS,MAAlC,EAAT,EAAqD,UAAS,GAAT,EAAa;AAChE,UAAI,MAAM,EAAV;AACA,UAAI,MAAJ,CAAW,IAAX,CAAgB,QAAhB,CAAyB,YAAzB,EAAuC,GAAvC;AACA,UAAI,WAAJ,CAAgB,MAAhB;AACA,UAAI,EAAJ,CAAO,MAAP,EAAe,UAAS,KAAT,EAAe;AAAE,eAAO,KAAP;AAAc,OAA9C;AACA,UAAI,EAAJ,CAAO,KAAP,EAAc,YAAU;AACtB,YAAI,MAAJ,CAAW,KAAX,CAAiB,QAAjB;AACA;AACD,OAHD;AAID,KATD;AAUD;;AAED,SAAO;AACL;AAAK,mBAAS,KAAT,EAAgB,GAAhB,EAAoB;AACvB,eAAO,KAAP,IAAgB,GAAhB;AACA,eAAO,IAAP;AACD;;AAHD;AAAA,OADK;;AAML,YAAQ;AACN;AAAS,yBAAS,IAAT,EAAc;AACrB,mBAAS,OAAO,IAAP,CAAY,MAAZ,EAAoB,GAApB,CAAwB,UAAS,KAAT,EAAe;AAC9C,mBAAO,QAAQ,IAAR,GAAe,OAAO,KAAP,CAAtB;AACD,WAFQ,EAEN,IAFM,CAED,IAFC,CAAT;;AAIA,qBAAW,IAAX;AACA,mBAAS,SAAS,GAAlB,EAAuB,YAAU;AAC/B,iBAAK,OAAL,CAAa,GAAb;AACA,gBAAI,MAAJ,EAAY;AACV,uBAAS,gBAAgB,MAAzB,EAAiC,YAAU;AACzC,mBAAG,0BAA0B,IAA1B,GAAiC,GAApC,EAAyC,OAAzC;AACD,eAFD;AAGD,aAJD,MAIO;AACL,iBAAG,0BAA0B,IAA1B,GAAiC,GAApC,EAAyC,OAAzC;AACD;AACF,WATD;AAUD;;AAhBD;AAAA;AADM;AANH,GAAP;AA0BD;;AAED,SAAS,aAAT,EAAwB,YAAU;;AAEhC,SAAO,UAAS,IAAT,EAAe;AACpB,WAAO,MAAP,CAAc,IAAd,EAAoB,IAApB;AACD,GAFD;;AAIA,QAAM,YAAW;AACf,WAAO,KAAP;AACD,GAFD;;AAIA,MAAI,GAAJ,EACG,MADH,CAEG,OAFH,CAEW,OAFX;;AAIA,MAAI,QAAJ,EACG,MADH,CAEG,OAFH,CAEW,kBAFX;;AAIA,MAAI,QAAJ,EACG,GADH,CACO,QADP,EACiB,kBADjB,EAEG,MAFH,CAGG,OAHH,CAGW,wBAHX;AAID,CAtBD","file":"/packages/practicalmeteor:mocha/test/http.meta.2.js.map","sourcesContent":["var http = require('http');\n\nvar PORT = 8899;\n\nvar server = http.createServer(function(req, res){\n  var accept = req.headers.accept || ''\n    , json = ~accept.indexOf('json');\n\n  switch (req.url) {\n    case '/':\n      res.end('hello');\n      break;\n    case '/users':\n      if (json) {\n        res.end('[\"tobi\",\"loki\",\"jane\"]');\n      } else {\n        res.end('tobi, loki, jane');\n      }\n      break;\n  }\n})\n\nfunction get(url) {\n  var fields\n    , expected\n    , header = {};\n\n  function request(done) {\n    http.get({ path: url, port: PORT, headers: header }, function(res){\n      var buf = '';\n      res.should.have.property('statusCode', 200);\n      res.setEncoding('utf8');\n      res.on('data', function(chunk){ buf += chunk });\n      res.on('end', function(){\n        buf.should.equal(expected);\n        done();\n      });\n    })\n  }\n\n  return {\n    set: function(field, val){\n      header[field] = val;\n      return this;\n    },\n\n    should: {\n      respond: function(body){\n        fields = Object.keys(header).map(function(field){\n          return field + ': ' + header[field];\n        }).join(', ');\n\n        expected = body;\n        describe('GET ' + url, function(){\n          this.timeout(500);\n          if (fields) {\n            describe('when given ' + fields, function(){\n              it('should respond with \"' + body + '\"', request);\n            });\n          } else {\n            it('should respond with \"' + body + '\"', request);\n          }\n        });\n      }\n    }\n  };\n}\n\ndescribe('http server', function(){\n\n  before(function(done) {\n    server.listen(PORT, done);\n  });\n\n  after(function() {\n    server.close();\n  });\n\n  get('/')\n    .should\n    .respond('hello')\n\n  get('/users')\n    .should\n    .respond('tobi, loki, jane')\n\n  get('/users')\n    .set('Accept', 'application/json')\n    .should\n    .respond('[\"tobi\",\"loki\",\"jane\"]')\n})\n"]},"hash":"0a8e03c97a08893806f6868ef36d4c58546b4554"}
