{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/practicalmeteor:mocha/test/runnable.js","filenameRelative":"/packages/practicalmeteor:mocha/test/runnable.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/practicalmeteor:mocha/test/runnable.js.map","sourceFileName":"/packages/practicalmeteor:mocha/test/runnable.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"runnable"},"ignored":false,"code":"var mocha = require('../'),\n    utils = mocha.utils,\n    Runnable = mocha.Runnable,\n    EventEmitter = require('events').EventEmitter;\n\ndescribe('Runnable(title, fn)', function () {\n  // For every test we poison the global time-related methods.\n  // runnable.js etc. should keep its own local copy, in order to fix GH-237.\n  // NB: we can't poison global.Date because the normal implementation of\n  // global.setTimeout uses it [1] so if the runnable.js keeps a copy of\n  // global.setTimeout (like it's supposed to), that will blow up.\n  // [1]: https://github.com/joyent/node/blob/7fc835afe362ebd30a0dbec81d3360bd24525222/lib/timers.js#L74\n  var setTimeout = global.setTimeout,\n      setInterval = global.setInterval,\n      clearTimeout = global.clearTimeout,\n      clearInterval = global.clearInterval;\n\n  function poisonPill() {\n    throw new Error(\"Don't use global time-related stuff.\");\n  }\n\n  beforeEach(function () {\n    global.setTimeout = global.setInterval = global.clearTimeout = global.clearInterval = poisonPill;\n  });\n\n  afterEach(function () {\n    global.setTimeout = setTimeout;\n    global.setInterval = setInterval;\n    global.clearTimeout = clearTimeout;\n    global.clearInterval = clearInterval;\n  });\n\n  describe('#timeout(ms)', function () {\n    it('should set the timeout', function () {\n      var run = new Runnable();\n      run.timeout(1000);\n      run.timeout().should.equal(1000);\n    });\n  });\n\n  describe('#enableTimeouts(enabled)', function () {\n    it('should set enabled', function () {\n      var run = new Runnable();\n      run.enableTimeouts(false);\n      run.enableTimeouts().should.equal(false);\n    });\n  });\n\n  describe('#slow(ms)', function () {\n    it('should set the slow threshold', function () {\n      var run = new Runnable();\n      run.slow(100);\n      run.slow().should.equal(100);\n    });\n  });\n\n  describe('.title', function () {\n    it('should be present', function () {\n      new Runnable('foo').title.should.equal('foo');\n    });\n  });\n\n  describe('when arity >= 1', function () {\n    it('should be .async', function () {\n      var run = new Runnable('foo', function (done) {});\n      run.async.should.equal(1);\n      run.sync.should.be['false']();\n    });\n  });\n\n  describe('when arity == 0', function () {\n    it('should be .sync', function () {\n      var run = new Runnable('foo', function () {});\n      run.async.should.be.equal(0);\n      run.sync.should.be['true']();\n    });\n  });\n\n  describe('#globals', function () {\n    it('should allow for whitelisting globals', function (done) {\n      var test = new Runnable('foo', function () {});\n      test.async.should.be.equal(0);\n      test.sync.should.be['true']();\n      test.globals(['foobar']);\n      test.run(done);\n    });\n  });\n\n  describe('#retries(n)', function () {\n    it('should set the number of retries', function () {\n      var run = new Runnable();\n      run.retries(1);\n      run.retries().should.equal(1);\n    });\n  });\n\n  describe('.run(fn)', function () {\n    describe('when .pending', function () {\n      it('should not invoke the callback', function (done) {\n        var test = new Runnable('foo', function () {\n          throw new Error('should not be called');\n        });\n\n        test.pending = true;\n        test.run(done);\n      });\n    });\n\n    describe('when sync', function () {\n      describe('without error', function () {\n        it('should invoke the callback', function (done) {\n          var calls = 0;\n          var test = new Runnable('foo', function () {\n            ++calls;\n          });\n\n          test.run(function (err) {\n            calls.should.equal(1);\n            test.duration.should.be.type('number');\n            done(err);\n          });\n        });\n      });\n\n      describe('when an exception is thrown', function () {\n        it('should invoke the callback', function (done) {\n          var calls = 0;\n          var test = new Runnable('foo', function () {\n            ++calls;\n            throw new Error('fail');\n          });\n\n          test.run(function (err) {\n            calls.should.equal(1);\n            err.message.should.equal('fail');\n            done();\n          });\n        });\n      });\n\n      describe('when an exception is thrown and is allowed to remain uncaught', function () {\n        it('throws an error when it is allowed', function (done) {\n          var test = new Runnable('foo', function () {\n            throw new Error('fail');\n          });\n          test.allowUncaught = true;\n          function fail() {\n            test.run(function (err) {});\n          }\n          fail.should['throw']('fail');\n          done();\n        });\n      });\n    });\n\n    describe('when timeouts are disabled', function () {\n      it('should not error with timeout', function (done) {\n        var test = new Runnable('foo', function (done) {\n          setTimeout(process.nextTick.bind(undefined, done), 2);\n        });\n        test.timeout(1);\n        test.enableTimeouts(false);\n        test.run(done);\n      });\n    });\n\n    describe('when async', function () {\n      describe('without error', function () {\n        it('should invoke the callback', function (done) {\n          var calls = 0;\n          var test = new Runnable('foo', function (done) {\n            process.nextTick(done);\n          });\n\n          test.run(done);\n        });\n      });\n\n      describe('when the callback is invoked several times', function () {\n        describe('without an error', function () {\n          it('should emit a single \"error\" event', function (done) {\n            var calls = 0;\n            var errCalls = 0;\n\n            var test = new Runnable('foo', function (done) {\n              process.nextTick(done);\n              process.nextTick(done);\n              process.nextTick(done);\n              process.nextTick(done);\n            });\n\n            test.on('error', function (err) {\n              ++errCalls;\n              err.message.should.equal('done() called multiple times');\n              calls.should.equal(1);\n              errCalls.should.equal(1);\n              done();\n            });\n\n            test.run(function () {\n              ++calls;\n            });\n          });\n        });\n\n        describe('with an error', function () {\n          it('should emit a single \"error\" event', function (done) {\n            var calls = 0;\n            var errCalls = 0;\n\n            var test = new Runnable('foo', function (done) {\n              done(new Error('fail'));\n              process.nextTick(done);\n              done(new Error('fail'));\n              process.nextTick(done);\n              process.nextTick(done);\n            });\n\n            test.on('error', function (err) {\n              ++errCalls;\n              err.message.should.equal('fail');\n              calls.should.equal(1);\n              errCalls.should.equal(1);\n              done();\n            });\n\n            test.run(function () {\n              ++calls;\n            });\n          });\n        });\n      });\n\n      describe('when an exception is thrown', function () {\n        it('should invoke the callback', function (done) {\n          var calls = 0;\n          var test = new Runnable('foo', function (done) {\n            throw new Error('fail');\n            process.nextTick(done);\n          });\n\n          test.run(function (err) {\n            err.message.should.equal('fail');\n            done();\n          });\n        });\n\n        it('should not throw its own exception if passed a non-object', function (done) {\n          var test = new Runnable('foo', function (done) {\n            throw null;\n            process.nextTick(done);\n          });\n\n          test.run(function (err) {\n            err.message.should.equal(utils.undefinedError().message);\n            done();\n          });\n        });\n      });\n\n      describe('when an exception is thrown and is allowed to remain uncaught', function () {\n        it('throws an error when it is allowed', function (done) {\n          var test = new Runnable('foo', function (done) {\n            throw new Error('fail');\n            process.nextTick(done);\n          });\n          test.allowUncaught = true;\n          function fail() {\n            test.run(function (err) {});\n          }\n          fail.should['throw']('fail');\n          done();\n        });\n      });\n\n      describe('when an error is passed', function () {\n        it('should invoke the callback', function (done) {\n          var calls = 0;\n          var test = new Runnable('foo', function (done) {\n            done(new Error('fail'));\n          });\n\n          test.run(function (err) {\n            err.message.should.equal('fail');\n            done();\n          });\n        });\n      });\n\n      describe('when done() is invoked with a non-Error object', function () {\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function (done) {\n            done({ error: 'Test error' });\n          });\n\n          test.run(function (err) {\n            err.message.should.equal('done() invoked with non-Error: {\"error\":\"Test error\"}');\n            done();\n          });\n        });\n      });\n\n      describe('when done() is invoked with a string', function () {\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function (done) {\n            done('Test error');\n          });\n\n          test.run(function (err) {\n            err.message.should.equal('done() invoked with non-Error: Test error');\n            done();\n          });\n        });\n      });\n\n      it('should allow updating the timeout', function (done) {\n        var callCount = 0;\n        var increment = function increment() {\n          callCount++;\n        };\n        var test = new Runnable('foo', function (done) {\n          setTimeout(increment, 1);\n          setTimeout(increment, 100);\n        });\n        test.timeout(10);\n        test.run(function (err) {\n          err.should.be.ok();\n          callCount.should.equal(1);\n          done();\n        });\n      });\n\n      it('should allow a timeout of 0');\n    });\n\n    describe('when fn returns a promise', function () {\n      describe('when the promise is fulfilled with no value', function () {\n        var fulfilledPromise = {\n          then: function () {\n            function then(fulfilled, rejected) {\n              process.nextTick(fulfilled);\n            }\n\n            return then;\n          }()\n        };\n\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function () {\n            return fulfilledPromise;\n          });\n\n          test.run(done);\n        });\n      });\n\n      describe('when the promise is fulfilled with a value', function () {\n        var fulfilledPromise = {\n          then: function () {\n            function then(fulfilled, rejected) {\n              process.nextTick(function () {\n                fulfilled({});\n              });\n            }\n\n            return then;\n          }()\n        };\n\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function () {\n            return fulfilledPromise;\n          });\n\n          test.run(done);\n        });\n      });\n\n      describe('when the promise is rejected', function () {\n        var expectedErr = new Error('fail');\n        var rejectedPromise = {\n          then: function () {\n            function then(fulfilled, rejected) {\n              process.nextTick(function () {\n                rejected(expectedErr);\n              });\n            }\n\n            return then;\n          }()\n        };\n\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function () {\n            return rejectedPromise;\n          });\n\n          test.run(function (err) {\n            err.should.equal(expectedErr);\n            done();\n          });\n        });\n      });\n\n      describe('when the promise is rejected without a reason', function () {\n        var expectedErr = new Error('Promise rejected with no or falsy reason');\n        var rejectedPromise = {\n          then: function () {\n            function then(fulfilled, rejected) {\n              process.nextTick(function () {\n                rejected();\n              });\n            }\n\n            return then;\n          }()\n        };\n\n        it('should invoke the callback', function (done) {\n          var test = new Runnable('foo', function () {\n            return rejectedPromise;\n          });\n\n          test.run(function (err) {\n            err.should.eql(expectedErr);\n            done();\n          });\n        });\n      });\n\n      describe('when the promise takes too long to settle', function () {\n        var foreverPendingPromise = {\n          then: function () {\n            function then() {}\n\n            return then;\n          }()\n        };\n\n        it('should give the timeout error', function (done) {\n          var test = new Runnable('foo', function () {\n            return foreverPendingPromise;\n          });\n\n          test.timeout(10);\n          test.run(function (err) {\n            err.should.be.ok();\n            done();\n          });\n        });\n      });\n    });\n\n    describe('when fn returns a non-promise', function () {\n      it('should invoke the callback', function (done) {\n        var test = new Runnable('foo', function () {\n          return { then: \"i ran my tests\" };\n        });\n\n        test.run(done);\n      });\n    });\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/practicalmeteor:mocha/test/runnable.js"],"names":[],"mappings":"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","file":"/packages/practicalmeteor:mocha/test/runnable.js.map","sourcesContent":["var mocha = require('../')\n  , utils = mocha.utils\n  , Runnable = mocha.Runnable\n  , EventEmitter = require('events').EventEmitter;\n\ndescribe('Runnable(title, fn)', function(){\n  // For every test we poison the global time-related methods.\n  // runnable.js etc. should keep its own local copy, in order to fix GH-237.\n  // NB: we can't poison global.Date because the normal implementation of\n  // global.setTimeout uses it [1] so if the runnable.js keeps a copy of\n  // global.setTimeout (like it's supposed to), that will blow up.\n  // [1]: https://github.com/joyent/node/blob/7fc835afe362ebd30a0dbec81d3360bd24525222/lib/timers.js#L74\n  var setTimeout = global.setTimeout\n    , setInterval = global.setInterval\n    , clearTimeout = global.clearTimeout\n    , clearInterval = global.clearInterval;\n\n  function poisonPill() {\n    throw new Error(\"Don't use global time-related stuff.\");\n  }\n\n  beforeEach(function(){\n    global.setTimeout =\n    global.setInterval =\n    global.clearTimeout =\n    global.clearInterval = poisonPill;\n  })\n\n  afterEach(function(){\n    global.setTimeout = setTimeout;\n    global.setInterval = setInterval;\n    global.clearTimeout = clearTimeout;\n    global.clearInterval = clearInterval;\n  })\n\n  describe('#timeout(ms)', function(){\n    it('should set the timeout', function(){\n      var run = new Runnable;\n      run.timeout(1000)\n      run.timeout().should.equal(1000);\n    })\n  })\n\n  describe('#enableTimeouts(enabled)', function(){\n    it('should set enabled', function(){\n      var run = new Runnable;\n      run.enableTimeouts(false);\n      run.enableTimeouts().should.equal(false);\n    });\n  });\n\n  describe('#slow(ms)', function(){\n    it('should set the slow threshold', function(){\n      var run = new Runnable;\n      run.slow(100)\n      run.slow().should.equal(100);\n    })\n  })\n\n  describe('.title', function(){\n    it('should be present', function(){\n      new Runnable('foo').title.should.equal('foo');\n    })\n  })\n\n  describe('when arity >= 1', function(){\n    it('should be .async', function(){\n      var run = new Runnable('foo', function(done){});\n      run.async.should.equal(1);\n      run.sync.should.be.false();\n    })\n  })\n\n  describe('when arity == 0', function(){\n    it('should be .sync', function(){\n      var run = new Runnable('foo', function(){});\n      run.async.should.be.equal(0);\n      run.sync.should.be.true();\n    })\n  })\n\n  describe('#globals', function(){\n    it('should allow for whitelisting globals', function(done){\n      var test = new Runnable('foo', function(){});\n      test.async.should.be.equal(0);\n      test.sync.should.be.true();\n      test.globals(['foobar']);\n      test.run(done);\n    })\n  })\n\n  describe('#retries(n)', function(){\n    it('should set the number of retries', function(){\n      var run = new Runnable;\n      run.retries(1);\n      run.retries().should.equal(1);\n    })\n  })\n\n  describe('.run(fn)', function(){\n    describe('when .pending', function(){\n      it('should not invoke the callback', function(done){\n        var test = new Runnable('foo', function(){\n          throw new Error('should not be called');\n        });\n\n        test.pending = true;\n        test.run(done);\n      })\n    })\n\n    describe('when sync', function(){\n      describe('without error', function(){\n        it('should invoke the callback', function(done){\n          var calls = 0;\n          var test = new Runnable('foo', function(){\n            ++calls;\n          });\n\n          test.run(function(err){\n            calls.should.equal(1);\n            test.duration.should.be.type('number');\n            done(err);\n          })\n        })\n      })\n\n      describe('when an exception is thrown', function(){\n        it('should invoke the callback', function(done){\n          var calls = 0;\n          var test = new Runnable('foo', function(){\n            ++calls;\n            throw new Error('fail');\n          });\n\n          test.run(function(err){\n            calls.should.equal(1);\n            err.message.should.equal('fail');\n            done();\n          })\n        })\n      })\n\n      describe('when an exception is thrown and is allowed to remain uncaught', function(){\n        it('throws an error when it is allowed', function(done) {\n          var test = new Runnable('foo', function(){\n            throw new Error('fail');\n          });\n          test.allowUncaught = true;\n          function fail() {\n            test.run(function(err) {});\n          }\n          fail.should.throw('fail');\n          done();\n        })\n      })\n    })\n\n    describe('when timeouts are disabled', function() {\n      it('should not error with timeout', function(done) {\n        var test = new Runnable('foo', function(done){\n          setTimeout(process.nextTick.bind(undefined, done), 2);\n        });\n        test.timeout(1);\n        test.enableTimeouts(false);\n        test.run(done);\n      });\n    });\n\n    describe('when async', function(){\n      describe('without error', function(){\n        it('should invoke the callback', function(done){\n          var calls = 0;\n          var test = new Runnable('foo', function(done){\n            process.nextTick(done);\n          });\n\n          test.run(done);\n        })\n      })\n\n      describe('when the callback is invoked several times', function(){\n        describe('without an error', function(){\n          it('should emit a single \"error\" event', function(done){\n            var calls = 0;\n            var errCalls = 0;\n\n            var test = new Runnable('foo', function(done){\n              process.nextTick(done);\n              process.nextTick(done);\n              process.nextTick(done);\n              process.nextTick(done);\n            });\n\n            test.on('error', function(err){\n              ++errCalls;\n              err.message.should.equal('done() called multiple times');\n              calls.should.equal(1);\n              errCalls.should.equal(1);\n              done();\n            });\n\n            test.run(function(){\n              ++calls;\n            });\n          })\n        })\n\n        describe('with an error', function(){\n          it('should emit a single \"error\" event', function(done){\n            var calls = 0;\n            var errCalls = 0;\n\n            var test = new Runnable('foo', function(done){\n              done(new Error('fail'));\n              process.nextTick(done);\n              done(new Error('fail'));\n              process.nextTick(done);\n              process.nextTick(done);\n            });\n\n            test.on('error', function(err){\n              ++errCalls;\n              err.message.should.equal('fail');\n              calls.should.equal(1);\n              errCalls.should.equal(1);\n              done();\n            });\n\n            test.run(function(){\n              ++calls;\n            });\n          })\n        })\n      })\n\n      describe('when an exception is thrown', function(){\n        it('should invoke the callback', function(done){\n          var calls = 0;\n          var test = new Runnable('foo', function(done){\n            throw new Error('fail');\n            process.nextTick(done);\n          });\n\n          test.run(function(err){\n            err.message.should.equal('fail');\n            done();\n          });\n        })\n\n        it('should not throw its own exception if passed a non-object', function (done) {\n          var test = new Runnable('foo', function(done) {\n            throw null;\n            process.nextTick(done);\n          });\n\n          test.run(function(err) {\n            err.message.should.equal(utils.undefinedError().message);\n            done();\n          })\n        });\n      })\n\n      describe('when an exception is thrown and is allowed to remain uncaught', function(){\n        it('throws an error when it is allowed', function(done) {\n          var test = new Runnable('foo', function(done){\n            throw new Error('fail');\n            process.nextTick(done);\n          });\n          test.allowUncaught = true;\n          function fail() {\n            test.run(function(err) {});\n          }\n          fail.should.throw('fail');\n          done();\n        })\n      })\n\n      describe('when an error is passed', function(){\n        it('should invoke the callback', function(done){\n          var calls = 0;\n          var test = new Runnable('foo', function(done){\n            done(new Error('fail'));\n          });\n\n          test.run(function(err){\n            err.message.should.equal('fail');\n            done();\n          });\n        })\n      })\n\n      describe('when done() is invoked with a non-Error object', function(){\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(done){\n            done({ error: 'Test error' });\n          });\n\n          test.run(function(err){\n            err.message.should.equal('done() invoked with non-Error: {\"error\":\"Test error\"}');\n            done();\n          });\n        })\n      })\n\n      describe('when done() is invoked with a string', function(){\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(done){\n            done('Test error');\n          });\n\n          test.run(function(err){\n            err.message.should.equal('done() invoked with non-Error: Test error');\n            done();\n          });\n        })\n      })\n\n      it('should allow updating the timeout', function(done){\n        var callCount = 0;\n        var increment = function() {\n          callCount++;\n        };\n        var test = new Runnable('foo', function(done){\n          setTimeout(increment, 1);\n          setTimeout(increment, 100);\n        });\n        test.timeout(10);\n        test.run(function(err){\n          err.should.be.ok();\n          callCount.should.equal(1);\n          done();\n        });\n      })\n\n      it('should allow a timeout of 0')\n    })\n\n    describe('when fn returns a promise', function(){\n      describe('when the promise is fulfilled with no value', function(){\n        var fulfilledPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(fulfilled);\n          }\n        };\n\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(){\n            return fulfilledPromise;\n          });\n\n          test.run(done);\n        })\n      })\n\n      describe('when the promise is fulfilled with a value', function(){\n        var fulfilledPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(function () {\n              fulfilled({});\n            });\n          }\n        };\n\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(){\n            return fulfilledPromise;\n          });\n\n          test.run(done);\n        })\n      })\n\n      describe('when the promise is rejected', function(){\n        var expectedErr = new Error('fail');\n        var rejectedPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(function () {\n              rejected(expectedErr);\n            });\n          }\n        };\n\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(){\n            return rejectedPromise;\n          });\n\n          test.run(function(err){\n            err.should.equal(expectedErr);\n            done();\n          });\n        })\n      })\n\n      describe('when the promise is rejected without a reason', function(){\n        var expectedErr = new Error('Promise rejected with no or falsy reason');\n        var rejectedPromise = {\n          then: function (fulfilled, rejected) {\n            process.nextTick(function () {\n              rejected();\n            });\n          }\n        };\n\n        it('should invoke the callback', function(done){\n          var test = new Runnable('foo', function(){\n            return rejectedPromise;\n          });\n\n          test.run(function(err){\n            err.should.eql(expectedErr);\n            done();\n          });\n        })\n      })\n\n      describe('when the promise takes too long to settle', function(){\n        var foreverPendingPromise = {\n          then: function () { }\n        };\n\n        it('should give the timeout error', function(done){\n          var test = new Runnable('foo', function(){\n            return foreverPendingPromise;\n          });\n\n          test.timeout(10);\n          test.run(function(err){\n            err.should.be.ok();\n            done();\n          });\n        })\n      })\n    })\n\n    describe('when fn returns a non-promise', function(){\n      it('should invoke the callback', function(done){\n        var test = new Runnable('foo', function(){\n          return { then: \"i ran my tests\" };\n        });\n\n        test.run(done);\n      })\n    })\n  })\n})\n"]},"hash":"3247f81e453dcec89844c13f21eed0f996cdafc2"}
