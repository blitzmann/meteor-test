{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"meteor/practicalmeteor:chai","imported":["assert"],"specifiers":[{"kind":"named","imported":"assert","local":"assert"}]},{"source":"./tasks.js","imported":["Tasks"],"specifiers":[{"kind":"named","imported":"Tasks","local":"Tasks"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/api/tasks.test.js","filenameRelative":"/imports/api/tasks.test.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/tasks.test.js.map","sourceFileName":"/imports/api/tasks.test.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"tasks.test"},"ignored":false,"code":"var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Random;module.import('meteor/random',{\"Random\":function(v){Random=v}});var assert;module.import('meteor/practicalmeteor:chai',{\"assert\":function(v){assert=v}});var Tasks;module.import('./tasks.js',{\"Tasks\":function(v){Tasks=v}});/* eslint-env mocha */\n\n\n\n\n\n\nif (Meteor.isServer) {\n  describe('Tasks', function () {\n    describe('methods', function () {\n      var userId = Random.id();\n      var taskId = void 0;\n\n      beforeEach(function () {\n        Tasks.remove({});\n        taskId = Tasks.insert({\n          text: 'test task',\n          createdAt: new Date(),\n          owner: userId,\n          username: 'tmeasday'\n        });\n      });\n\n      it('can delete owned task', function () {\n        // Find the internal implementation of the task method so we can\n        // test it in isolation\n        var deleteTask = Meteor.server.method_handlers['tasks.remove'];\n\n        // Set up a fake method invocation that looks like what the method expects\n        var invocation = {\n          userId: userId\n        };\n\n        // Run the method with `this` set to the fake invocation\n        deleteTask.apply(invocation, [taskId]);\n\n        // Verify that the method does what we expected\n        assert.equal(Tasks.find().count(), 0);\n      });\n    });\n  });\n}","ast":null,"map":{"version":3,"sources":["/imports/api/tasks.test.js"],"names":[],"mappings":";;AAEA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,MAAT,QAAuB,6BAAvB;AACA,SAAS,KAAT,QAAsB,YAAtB;;AAEA,IAAI,OAAO,QAAX,EAAqB;AACnB,WAAS,OAAT,EAAkB,YAAM;AACtB,aAAS,SAAT,EAAoB,YAAM;AACxB,UAAM,SAAS,OAAO,EAAP,EAAf;AACA,UAAI,eAAJ;;AAEA,iBAAW,YAAM;AACf,cAAM,MAAN,CAAa,EAAb;AACA,iBAAS,MAAM,MAAN,CAAa;AACpB,gBAAM,WADc;AAEpB,qBAAW,IAAI,IAAJ,EAFS;AAGpB,iBAAO,MAHa;AAIpB,oBAAU;AAJU,SAAb,CAAT;AAMD,OARD;;AAUA,SAAG,uBAAH,EAA4B,YAAM;;;AAGhC,YAAM,aAAa,OAAO,MAAP,CAAc,eAAd,CAA8B,cAA9B,CAAnB;;;AAGA,YAAM,aAAa;AACjB;AADiB,SAAnB;;;AAKA,mBAAW,KAAX,CAAiB,UAAjB,EAA6B,CAAC,MAAD,CAA7B;;;AAGA,eAAO,KAAP,CAAa,MAAM,IAAN,GAAa,KAAb,EAAb,EAAmC,CAAnC;AACD,OAfD;AAgBD,KA9BD;AA+BD,GAhCD;AAiCD","file":"/imports/api/tasks.test.js.map","sourcesContent":["/* eslint-env mocha */\r\n\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { Random } from 'meteor/random';\r\nimport { assert } from 'meteor/practicalmeteor:chai';\r\nimport { Tasks } from './tasks.js';\r\n\r\nif (Meteor.isServer) {\r\n  describe('Tasks', () => {\r\n    describe('methods', () => {\r\n      const userId = Random.id();\r\n      let taskId;\r\n\r\n      beforeEach(() => {\r\n        Tasks.remove({});\r\n        taskId = Tasks.insert({\r\n          text: 'test task',\r\n          createdAt: new Date(),\r\n          owner: userId,\r\n          username: 'tmeasday',\r\n        });\r\n      });\r\n\r\n      it('can delete owned task', () => {\r\n        // Find the internal implementation of the task method so we can\r\n        // test it in isolation\r\n        const deleteTask = Meteor.server.method_handlers['tasks.remove'];\r\n\r\n        // Set up a fake method invocation that looks like what the method expects\r\n        const invocation = {\r\n          userId\r\n        };\r\n\r\n        // Run the method with `this` set to the fake invocation\r\n        deleteTask.apply(invocation, [taskId]);\r\n\r\n        // Verify that the method does what we expected\r\n        assert.equal(Tasks.find().count(), 0);\r\n      });\r\n    });\r\n  });\r\n}\n"]},"hash":"acb8a4bf01160163fa93a785cf3d1640c78a70c4"}
