{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/practicalmeteor:mocha/test/runner.js","filenameRelative":"/packages/practicalmeteor:mocha/test/runner.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/practicalmeteor:mocha/test/runner.js.map","sourceFileName":"/packages/practicalmeteor:mocha/test/runner.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"runner"},"ignored":false,"code":"var mocha = require('../'),\n    Suite = mocha.Suite,\n    Runner = mocha.Runner,\n    Test = mocha.Test;\n\ndescribe('Runner', function () {\n  var suite, runner;\n\n  beforeEach(function () {\n    suite = new Suite(null, 'root');\n    runner = new Runner(suite);\n  });\n\n  describe('.grep()', function () {\n    it('should update the runner.total with number of matched tests', function () {\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      var newRunner = new Runner(suite);\n      newRunner.grep(/lions/);\n      newRunner.total.should.equal(2);\n    });\n\n    it('should update the runner.total with number of matched tests when inverted', function () {\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      var newRunner = new Runner(suite);\n      newRunner.grep(/lions/, true);\n      newRunner.total.should.equal(1);\n    });\n  });\n\n  describe('.grepTotal()', function () {\n    it('should return the total number of matched tests', function () {\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      runner.grep(/lions/);\n      runner.grepTotal(suite).should.equal(2);\n    });\n\n    it('should return the total number of matched tests when inverted', function () {\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      runner.grep(/lions/, true);\n      runner.grepTotal(suite).should.equal(1);\n    });\n  });\n\n  describe('.globalProps()', function () {\n    it('should include common non enumerable globals', function () {\n      var props = runner.globalProps();\n      props.should.containEql('setTimeout');\n      props.should.containEql('clearTimeout');\n      props.should.containEql('setInterval');\n      props.should.containEql('clearInterval');\n      props.should.containEql('Date');\n      props.should.containEql('XMLHttpRequest');\n    });\n  });\n\n  describe('.globals()', function () {\n    it('should default to the known globals', function () {\n      runner.globals().length.should.be.above(16);\n    });\n\n    it('should white-list globals', function () {\n      runner.globals(['foo', 'bar']);\n      runner.globals().should.containEql('foo');\n      runner.globals().should.containEql('bar');\n    });\n  });\n\n  describe('.checkGlobals(test)', function () {\n    it('should allow variables that match a wildcard', function (done) {\n      runner.globals(['foo*', 'giz*']);\n      global.foo = 'baz';\n      global.gizmo = 'quux';\n      runner.checkGlobals();\n      delete global.foo;\n      delete global.gizmo;\n      done();\n    });\n\n    it('should emit \"fail\" when a new global is introduced', function (done) {\n      runner.checkGlobals();\n      global.foo = 'bar';\n      runner.on('fail', function (test, err) {\n        test.should.equal('im a test');\n        err.message.should.equal('global leak detected: foo');\n        delete global.foo;\n        done();\n      });\n      runner.checkGlobals('im a test');\n    });\n\n    it('should emit \"fail\" when a single new disallowed global is introduced after a single extra global is allowed', function (done) {\n      var doneCalled = false;\n      runner.globals('good');\n      global.bad = 1;\n      runner.on('fail', function (test, err) {\n        delete global.bad;\n        done();\n        doneCalled = true;\n      });\n      runner.checkGlobals('test');\n      if (!doneCalled) {\n        done(Error(\"Expected test failure did not occur.\"));\n      }\n    });\n\n    it('should not fail when a new common global is introduced', function () {\n      // verify that the prop isn't enumerable\n      delete global.XMLHttpRequest;\n      global.propertyIsEnumerable('XMLHttpRequest').should.not.be.ok();\n\n      // create a new runner and keep a reference to the test.\n      var test = new Test('im a test about bears');\n      suite.addTest(test);\n      var newRunner = new Runner(suite);\n\n      // make the prop enumerable again.\n      global.XMLHttpRequest = function () {};\n      global.propertyIsEnumerable('XMLHttpRequest').should.be.ok();\n\n      // verify the test hasn't failed.\n      newRunner.checkGlobals(test);\n      test.should.not.have.key('state');\n\n      // clean up our global space.\n      delete global.XMLHttpRequest;\n    });\n\n    it('should pluralize the error message when several are introduced', function (done) {\n      runner.checkGlobals();\n      global.foo = 'bar';\n      global.bar = 'baz';\n      runner.on('fail', function (test, err) {\n        test.should.equal('im a test');\n        err.message.should.equal('global leaks detected: foo, bar');\n        delete global.foo;\n        delete global.bar;\n        done();\n      });\n      runner.checkGlobals('im a test');\n    });\n\n    it('should respect per test whitelisted globals', function () {\n      var test = new Test('im a test about lions');\n      test.globals(['foo']);\n\n      suite.addTest(test);\n      var runner = new Runner(suite);\n\n      global.foo = 'bar';\n\n      // verify the test hasn't failed.\n      runner.checkGlobals(test);\n      test.should.not.have.key('state');\n\n      delete global.foo;\n    });\n\n    it('should respect per test whitelisted globals but still detect other leaks', function (done) {\n      var test = new Test('im a test about lions');\n      test.globals(['foo']);\n\n      suite.addTest(test);\n\n      global.foo = 'bar';\n      global.bar = 'baz';\n      runner.on('fail', function (test, err) {\n        test.title.should.equal('im a test about lions');\n        err.message.should.equal('global leak detected: bar');\n        delete global.foo;\n        done();\n      });\n      runner.checkGlobals(test);\n    });\n  });\n\n  describe('.hook(name, fn)', function () {\n    it('should execute hooks after failed test if suite bail is true', function (done) {\n      runner.fail({});\n      suite.bail(true);\n      suite.afterEach(function () {\n        suite.afterAll(function () {\n          done();\n        });\n      });\n      runner.hook('afterEach', function () {});\n      runner.hook('afterAll', function () {});\n    });\n  });\n\n  describe('.fail(test, err)', function () {\n    it('should increment .failures', function () {\n      runner.failures.should.equal(0);\n      runner.fail({}, {});\n      runner.failures.should.equal(1);\n      runner.fail({}, {});\n      runner.failures.should.equal(2);\n    });\n\n    it('should set test.state to \"failed\"', function () {\n      var test = {};\n      runner.fail(test, 'some error');\n      test.state.should.equal('failed');\n    });\n\n    it('should emit \"fail\"', function (done) {\n      var test = {},\n          err = {};\n      runner.on('fail', function (test, err) {\n        test.should.equal(test);\n        err.should.equal(err);\n        done();\n      });\n      runner.fail(test, err);\n    });\n\n    it('should emit a helpful message when failed with a string', function (done) {\n      var test = {},\n          err = 'string';\n      runner.on('fail', function (test, err) {\n        err.message.should.equal('the string \"string\" was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    });\n\n    it('should emit a the error when failed with an Error instance', function (done) {\n      var test = {},\n          err = new Error('an error message');\n      runner.on('fail', function (test, err) {\n        err.message.should.equal('an error message');\n        done();\n      });\n      runner.fail(test, err);\n    });\n\n    it('should emit the error when failed with an Error-like object', function (done) {\n      var test = {},\n          err = { message: 'an error message' };\n      runner.on('fail', function (test, err) {\n        err.message.should.equal('an error message');\n        done();\n      });\n      runner.fail(test, err);\n    });\n\n    it('should emit a helpful message when failed with an Object', function (done) {\n      var test = {},\n          err = { x: 1 };\n      runner.on('fail', function (test, err) {\n        err.message.should.equal('the object {\\n  \"x\": 1\\n} was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    });\n\n    it('should emit a helpful message when failed with an Array', function (done) {\n      var test = {},\n          err = [1, 2];\n      runner.on('fail', function (test, err) {\n        err.message.should.equal('the array [\\n  1\\n  2\\n] was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    });\n  });\n\n  describe('.failHook(hook, err)', function () {\n    it('should increment .failures', function () {\n      runner.failures.should.equal(0);\n      runner.failHook({}, {});\n      runner.failures.should.equal(1);\n      runner.failHook({}, {});\n      runner.failures.should.equal(2);\n    });\n\n    it('should augment hook title with current test title', function () {\n      var hook = {\n        title: '\"before each\" hook',\n        ctx: { currentTest: new Test('should behave') }\n      };\n      runner.failHook(hook, {});\n      hook.title.should.equal('\"before each\" hook for \"should behave\"');\n\n      hook.ctx.currentTest = new Test('should obey');\n      runner.failHook(hook, {});\n      hook.title.should.equal('\"before each\" hook for \"should obey\"');\n    });\n\n    it('should emit \"fail\"', function (done) {\n      var hook = {},\n          err = {};\n      runner.on('fail', function (hook, err) {\n        hook.should.equal(hook);\n        err.should.equal(err);\n        done();\n      });\n      runner.failHook(hook, err);\n    });\n\n    it('should emit \"end\" if suite bail is true', function (done) {\n      var hook = {},\n          err = {};\n      suite.bail(true);\n      runner.on('end', done);\n      runner.failHook(hook, err);\n    });\n\n    it('should not emit \"end\" if suite bail is not true', function (done) {\n      var hook = {},\n          err = {};\n      suite.bail(false);\n      runner.on('end', function () {\n        throw new Error('\"end\" was emit, but the bail is false');\n      });\n      runner.failHook(hook, err);\n      done();\n    });\n  });\n\n  describe('allowUncaught', function () {\n    it('should allow unhandled errors to propagate through', function (done) {\n      var newRunner = new Runner(suite);\n      newRunner.allowUncaught = true;\n      newRunner.test = new Test('failing test', function () {\n        throw new Error('allow unhandled errors');\n      });\n      function fail() {\n        newRunner.runTest();\n      }\n      fail.should['throw']('allow unhandled errors');\n      done();\n    });\n  });\n\n  describe('stackTrace', function () {\n    var stack = ['AssertionError: foo bar', 'at EventEmitter.<anonymous> (/usr/local/dev/test.js:16:12)', 'at Context.<anonymous> (/usr/local/dev/test.js:19:5)', 'Test.Runnable.run (/usr/local/lib/node_modules/mocha/lib/runnable.js:244:7)', 'Runner.runTest (/usr/local/lib/node_modules/mocha/lib/runner.js:374:10)', '/usr/local/lib/node_modules/mocha/lib/runner.js:452:12', 'next (/usr/local/lib/node_modules/mocha/lib/runner.js:299:14)', '/usr/local/lib/node_modules/mocha/lib/runner.js:309:7', 'next (/usr/local/lib/node_modules/mocha/lib/runner.js:248:23)', 'Immediate._onImmediate (/usr/local/lib/node_modules/mocha/lib/runner.js:276:5)', 'at processImmediate [as _immediateCallback] (timers.js:321:17)'];\n\n    describe('shortStackTrace', function () {\n      it('should prettify the stack-trace', function (done) {\n        var hook = {},\n            err = new Error();\n        // Fake stack-trace\n        err.stack = stack.join('\\n');\n\n        runner.on('fail', function (hook, err) {\n          err.stack.should.equal(stack.slice(0, 3).join('\\n'));\n          done();\n        });\n        runner.failHook(hook, err);\n      });\n    });\n\n    describe('longStackTrace', function () {\n      it('should display the full stack-trace', function (done) {\n        var hook = {},\n            err = new Error();\n        // Fake stack-trace\n        err.stack = stack.join('\\n');\n        // Add --stack-trace option\n        runner.fullStackTrace = true;\n\n        runner.on('fail', function (hook, err) {\n          err.stack.should.equal(stack.join('\\n'));\n          done();\n        });\n        runner.failHook(hook, err);\n      });\n    });\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/practicalmeteor:mocha/test/runner.js"],"names":[],"mappings":"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","file":"/packages/practicalmeteor:mocha/test/runner.js.map","sourcesContent":["var mocha = require('../')\n  , Suite = mocha.Suite\n  , Runner = mocha.Runner\n  , Test = mocha.Test;\n\ndescribe('Runner', function(){\n  var suite, runner;\n\n  beforeEach(function(){\n    suite = new Suite(null, 'root');\n    runner = new Runner(suite);\n  })\n\n  describe('.grep()', function(){\n    it('should update the runner.total with number of matched tests', function(){\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      var newRunner = new Runner(suite);\n      newRunner.grep(/lions/);\n      newRunner.total.should.equal(2);\n    })\n\n    it('should update the runner.total with number of matched tests when inverted', function(){\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      var newRunner = new Runner(suite);\n      newRunner.grep(/lions/, true);\n      newRunner.total.should.equal(1);\n    })\n  })\n\n  describe('.grepTotal()', function(){\n    it('should return the total number of matched tests', function(){\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      runner.grep(/lions/);\n      runner.grepTotal(suite).should.equal(2);\n    })\n\n    it('should return the total number of matched tests when inverted', function(){\n      suite.addTest(new Test('im a test about lions'));\n      suite.addTest(new Test('im another test about lions'));\n      suite.addTest(new Test('im a test about bears'));\n      runner.grep(/lions/, true);\n      runner.grepTotal(suite).should.equal(1);\n    })\n  })\n\n  describe('.globalProps()', function(){\n    it('should include common non enumerable globals', function() {\n      var props = runner.globalProps();\n      props.should.containEql('setTimeout');\n      props.should.containEql('clearTimeout');\n      props.should.containEql('setInterval');\n      props.should.containEql('clearInterval');\n      props.should.containEql('Date');\n      props.should.containEql('XMLHttpRequest');\n    });\n  });\n\n  describe('.globals()', function(){\n    it('should default to the known globals', function(){\n      runner.globals().length.should.be.above(16);\n    })\n\n    it('should white-list globals', function(){\n      runner.globals(['foo', 'bar']);\n      runner.globals().should.containEql('foo');\n      runner.globals().should.containEql('bar');\n    })\n  })\n\n  describe('.checkGlobals(test)', function(){\n    it('should allow variables that match a wildcard', function(done) {\n      runner.globals(['foo*', 'giz*']);\n      global.foo = 'baz';\n      global.gizmo = 'quux';\n      runner.checkGlobals();\n      delete global.foo;\n      delete global.gizmo;\n      done()\n    })\n\n    it('should emit \"fail\" when a new global is introduced', function(done){\n      runner.checkGlobals();\n      global.foo = 'bar';\n      runner.on('fail', function(test, err){\n        test.should.equal('im a test');\n        err.message.should.equal('global leak detected: foo');\n        delete global.foo;\n        done();\n      });\n      runner.checkGlobals('im a test');\n    })\n\n    it('should emit \"fail\" when a single new disallowed global is introduced after a single extra global is allowed', function(done) {\n      var doneCalled = false;\n      runner.globals('good');\n      global.bad = 1;\n      runner.on('fail', function(test, err) {\n        delete global.bad;\n        done();\n        doneCalled = true;\n      });\n      runner.checkGlobals('test');\n      if (!doneCalled) {\n        done(Error(\"Expected test failure did not occur.\"));\n      }\n    });\n\n    it ('should not fail when a new common global is introduced', function(){\n      // verify that the prop isn't enumerable\n      delete global.XMLHttpRequest;\n      global.propertyIsEnumerable('XMLHttpRequest').should.not.be.ok();\n\n      // create a new runner and keep a reference to the test.\n      var test = new Test('im a test about bears');\n      suite.addTest(test);\n      var newRunner = new Runner(suite);\n\n      // make the prop enumerable again.\n      global.XMLHttpRequest = function() {};\n      global.propertyIsEnumerable('XMLHttpRequest').should.be.ok();\n\n      // verify the test hasn't failed.\n      newRunner.checkGlobals(test);\n      test.should.not.have.key('state');\n\n      // clean up our global space.\n      delete global.XMLHttpRequest;\n    });\n\n    it('should pluralize the error message when several are introduced', function(done){\n      runner.checkGlobals();\n      global.foo = 'bar';\n      global.bar = 'baz';\n      runner.on('fail', function(test, err){\n        test.should.equal('im a test');\n        err.message.should.equal('global leaks detected: foo, bar');\n        delete global.foo;\n        delete global.bar;\n        done();\n      });\n      runner.checkGlobals('im a test');\n    })\n\n    it('should respect per test whitelisted globals', function() {\n      var test = new Test('im a test about lions');\n      test.globals(['foo']);\n\n      suite.addTest(test);\n      var runner = new Runner(suite);\n\n      global.foo = 'bar';\n\n      // verify the test hasn't failed.\n      runner.checkGlobals(test);\n      test.should.not.have.key('state');\n\n      delete global.foo;\n    })\n\n    it('should respect per test whitelisted globals but still detect other leaks', function(done) {\n      var test = new Test('im a test about lions');\n      test.globals(['foo']);\n\n      suite.addTest(test);\n\n      global.foo = 'bar';\n      global.bar = 'baz';\n      runner.on('fail', function(test, err){\n        test.title.should.equal('im a test about lions');\n        err.message.should.equal('global leak detected: bar');\n        delete global.foo;\n        done();\n      });\n      runner.checkGlobals(test);\n    })\n  })\n\n  describe('.hook(name, fn)', function(){\n    it('should execute hooks after failed test if suite bail is true', function(done){\n      runner.fail({});\n      suite.bail(true);\n      suite.afterEach(function(){\n        suite.afterAll(function() {\n          done();\n        })\n      });\n      runner.hook('afterEach', function(){});\n      runner.hook('afterAll', function(){});\n    })\n  })\n\n  describe('.fail(test, err)', function(){\n    it('should increment .failures', function(){\n      runner.failures.should.equal(0);\n      runner.fail({}, {});\n      runner.failures.should.equal(1);\n      runner.fail({}, {});\n      runner.failures.should.equal(2);\n    })\n\n    it('should set test.state to \"failed\"', function(){\n      var test = {};\n      runner.fail(test, 'some error');\n      test.state.should.equal('failed');\n    })\n\n    it('should emit \"fail\"', function(done){\n      var test = {}, err = {};\n      runner.on('fail', function(test, err){\n        test.should.equal(test);\n        err.should.equal(err);\n        done();\n      });\n      runner.fail(test, err);\n    })\n\n    it('should emit a helpful message when failed with a string', function(done){\n      var test = {}, err = 'string';\n      runner.on('fail', function(test, err){\n        err.message.should.equal('the string \"string\" was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    })\n\n    it('should emit a the error when failed with an Error instance', function(done){\n      var test = {}, err = new Error('an error message');\n      runner.on('fail', function(test, err){\n        err.message.should.equal('an error message');\n        done();\n      });\n      runner.fail(test, err);\n    })\n\n    it('should emit the error when failed with an Error-like object', function(done){\n      var test = {}, err = {message: 'an error message'};\n      runner.on('fail', function(test, err){\n        err.message.should.equal('an error message');\n        done();\n      });\n      runner.fail(test, err);\n    })\n\n    it('should emit a helpful message when failed with an Object', function(done){\n      var test = {}, err = { x: 1 };\n      runner.on('fail', function(test, err){\n        err.message.should.equal('the object {\\n  \"x\": 1\\n} was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    })\n\n    it('should emit a helpful message when failed with an Array', function(done){\n      var test = {}, err = [1,2];\n      runner.on('fail', function(test, err){\n        err.message.should.equal('the array [\\n  1\\n  2\\n] was thrown, throw an Error :)');\n        done();\n      });\n      runner.fail(test, err);\n    })\n  })\n\n  describe('.failHook(hook, err)', function(){\n    it('should increment .failures', function(){\n      runner.failures.should.equal(0);\n      runner.failHook({}, {});\n      runner.failures.should.equal(1);\n      runner.failHook({}, {});\n      runner.failures.should.equal(2);\n    })\n\n    it('should augment hook title with current test title', function(){\n      var hook = {\n        title: '\"before each\" hook',\n        ctx: { currentTest: new Test('should behave') }\n      };\n      runner.failHook(hook, {});\n      hook.title.should.equal('\"before each\" hook for \"should behave\"');\n\n      hook.ctx.currentTest = new Test('should obey');\n      runner.failHook(hook, {});\n      hook.title.should.equal('\"before each\" hook for \"should obey\"');\n    })\n\n    it('should emit \"fail\"', function(done){\n      var hook = {}, err = {};\n      runner.on('fail', function(hook, err){\n        hook.should.equal(hook);\n        err.should.equal(err);\n        done();\n      });\n      runner.failHook(hook, err);\n    })\n\n    it('should emit \"end\" if suite bail is true', function(done){\n      var hook = {}, err = {};\n      suite.bail(true);\n      runner.on('end', done);\n      runner.failHook(hook, err);\n    })\n\n    it('should not emit \"end\" if suite bail is not true', function(done){\n      var hook = {}, err = {};\n      suite.bail(false);\n      runner.on('end', function() { throw new Error('\"end\" was emit, but the bail is false'); });\n      runner.failHook(hook, err);\n      done();\n    })\n  });\n\n  describe('allowUncaught', function() {\n    it('should allow unhandled errors to propagate through', function(done) {\n      var newRunner = new Runner(suite);\n      newRunner.allowUncaught = true;\n      newRunner.test = new Test('failing test', function() {\n        throw new Error('allow unhandled errors');\n      });\n      function fail() {\n        newRunner.runTest();\n      }\n      fail.should.throw('allow unhandled errors');\n      done();\n    });\n  });\n\n  describe('stackTrace', function() {\n    var stack = [ 'AssertionError: foo bar'\n      , 'at EventEmitter.<anonymous> (/usr/local/dev/test.js:16:12)'\n      , 'at Context.<anonymous> (/usr/local/dev/test.js:19:5)'\n      , 'Test.Runnable.run (/usr/local/lib/node_modules/mocha/lib/runnable.js:244:7)'\n      , 'Runner.runTest (/usr/local/lib/node_modules/mocha/lib/runner.js:374:10)'\n      , '/usr/local/lib/node_modules/mocha/lib/runner.js:452:12'\n      , 'next (/usr/local/lib/node_modules/mocha/lib/runner.js:299:14)'\n      , '/usr/local/lib/node_modules/mocha/lib/runner.js:309:7'\n      , 'next (/usr/local/lib/node_modules/mocha/lib/runner.js:248:23)'\n      , 'Immediate._onImmediate (/usr/local/lib/node_modules/mocha/lib/runner.js:276:5)'\n      , 'at processImmediate [as _immediateCallback] (timers.js:321:17)'];\n\n    describe('shortStackTrace', function() {\n      it('should prettify the stack-trace', function(done) {\n        var hook = {},\n            err = new Error();\n        // Fake stack-trace\n        err.stack = stack.join('\\n');\n\n        runner.on('fail', function(hook, err){\n          err.stack.should.equal(stack.slice(0,3).join('\\n'));\n          done();\n        });\n        runner.failHook(hook, err);\n      });\n    });\n\n    describe('longStackTrace', function() {\n      it('should display the full stack-trace', function(done) {\n        var hook = {},\n            err = new Error();\n        // Fake stack-trace\n        err.stack = stack.join('\\n');\n        // Add --stack-trace option\n        runner.fullStackTrace = true;\n\n        runner.on('fail', function(hook, err){\n          err.stack.should.equal(stack.join('\\n'));\n          done();\n        });\n        runner.failHook(hook, err);\n      });\n    });\n  });\n});\n"]},"hash":"6c8fe64affced1f8c690021b91e305c634ed08bd"}
