{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/practicalmeteor:mocha/test/integration/options.js","filenameRelative":"/packages/practicalmeteor:mocha/test/integration/options.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/practicalmeteor:mocha/test/integration/options.js.map","sourceFileName":"/packages/practicalmeteor:mocha/test/integration/options.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"options"},"ignored":false,"code":"var assert = require('assert');\nvar run = require('./helpers').runMochaJSON;\nvar args = [];\n\ndescribe('options', function () {\n  this.timeout(2000);\n\n  describe('--async-only', function () {\n\n    before(function () {\n      args = ['--async-only'];\n    });\n\n    it('should fail synchronous specs', function (done) {\n      run('options/async-only.sync.js', args, function (err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 0);\n        assert.equal(res.stats.failures, 1);\n\n        assert.equal(res.failures[0].title, 'throws an error');\n        assert.equal(res.code, 1);\n        done();\n      });\n    });\n\n    it('should allow asynchronous specs', function (done) {\n      run('options/async-only.async.js', args, function (err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 1);\n        assert.equal(res.stats.failures, 0);\n\n        assert.equal(res.passes[0].title, 'should pass');\n        assert.equal(res.code, 0);\n        done();\n      });\n    });\n  });\n\n  describe('--bail', function () {\n    before(function () {\n      args = ['--bail'];\n    });\n\n    it('should stop after the first error', function (done) {\n      run('options/bail.js', args, function (err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 1);\n        assert.equal(res.stats.failures, 1);\n\n        assert.equal(res.passes[0].title, 'should display this spec');\n        assert.equal(res.failures[0].title, 'should only display this error');\n        assert.equal(res.code, 1);\n        done();\n      });\n    });\n  });\n\n  describe('--sort', function () {\n    before(function () {\n      args = ['--sort'];\n    });\n\n    it('should sort tests in alphabetical order', function (done) {\n      run('options/sort*', args, function (err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 2);\n        assert.equal(res.stats.failures, 0);\n\n        assert.equal(res.passes[0].fullTitle, 'alpha should be executed first');\n        assert.equal(res.code, 0);\n        done();\n      });\n    });\n  });\n\n  describe('--delay', function () {\n    before(function () {\n      args = ['--delay'];\n    });\n\n    it('should run the generated test suite', function (done) {\n      run('options/delay.js', args, function (err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 2);\n        assert.equal(res.stats.failures, 0);\n\n        assert.equal(res.passes[0].title, 'should have waited 500ms to run this suite');\n        assert.equal(res.code, 0);\n        done();\n      });\n    });\n\n    it('should throw an error if the test suite failed to run', function (done) {\n      run('options/delay-fail.js', args, function (err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 0);\n        assert.equal(res.stats.failures, 1);\n\n        assert.equal(res.failures[0].title, 'Uncaught error outside test suite');\n        assert.equal(res.code, 1);\n        done();\n      });\n    });\n  });\n\n  describe('--grep', function () {\n    it('runs specs matching a string', function (done) {\n      args = ['--grep', 'match'];\n      run('options/grep.js', args, function (err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 2);\n        assert.equal(res.stats.failures, 0);\n        assert.equal(res.code, 0);\n        done();\n      });\n    });\n\n    it('runs specs matching a RegExp', function (done) {\n      args = ['--grep', '.*'];\n      run('options/grep.js', args, function (err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 2);\n        assert.equal(res.stats.failures, 1);\n        assert.equal(res.code, 1);\n        done();\n      });\n    });\n\n    describe('with --invert', function () {\n      it('runs specs that do not match the pattern', function (done) {\n        args = ['--grep', 'fail', '--invert'];\n        run('options/grep.js', args, function (err, res) {\n          assert(!err);\n          assert.equal(res.stats.pending, 0);\n          assert.equal(res.stats.passes, 2);\n          assert.equal(res.stats.failures, 0);\n          assert.equal(res.code, 0);\n          done();\n        });\n      });\n    });\n  });\n\n  describe('--retries', function () {\n    it('retries after a certain threshold', function (done) {\n      args = ['--retries', '3'];\n      run('options/retries.js', args, function (err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 0);\n        assert.equal(res.stats.tests, 1);\n        assert.equal(res.tests[0].currentRetry, 3);\n        assert.equal(res.stats.failures, 1);\n        assert.equal(res.code, 1);\n        done();\n      });\n    });\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/practicalmeteor:mocha/test/integration/options.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,MAAS,QAAQ,WAAR,EAAqB,YAAlC;AACA,IAAI,OAAS,EAAb;;AAEA,SAAS,SAAT,EAAoB,YAAW;AAC7B,OAAK,OAAL,CAAa,IAAb;;AAEA,WAAS,cAAT,EAAyB,YAAW;;AAElC,WAAO,YAAW;AAChB,aAAO,CAAC,cAAD,CAAP;AACD,KAFD;;AAIA,OAAG,+BAAH,EAAoC,UAAS,IAAT,EAAe;AACjD,UAAI,4BAAJ,EAAkC,IAAlC,EAAwC,UAAS,GAAT,EAAc,GAAd,EAAmB;AACzD,eAAO,CAAC,GAAR;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;;AAEA,eAAO,KAAP,CAAa,IAAI,QAAJ,CAAa,CAAb,EAAgB,KAA7B,EAAoC,iBAApC;AACA,eAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,OATD;AAUD,KAXD;;AAaA,OAAG,iCAAH,EAAsC,UAAS,IAAT,EAAe;AACnD,UAAI,6BAAJ,EAAmC,IAAnC,EAAyC,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC1D,eAAO,CAAC,GAAR;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;;AAEA,eAAO,KAAP,CAAa,IAAI,MAAJ,CAAW,CAAX,EAAc,KAA3B,EAAkC,aAAlC;AACA,eAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,OATD;AAUD,KAXD;AAYD,GA/BD;;AAiCA,WAAS,QAAT,EAAmB,YAAW;AAC5B,WAAO,YAAW;AAChB,aAAO,CAAC,QAAD,CAAP;AACD,KAFD;;AAIA,OAAG,mCAAH,EAAwC,UAAS,IAAT,EAAe;AACrD,UAAI,iBAAJ,EAAuB,IAAvB,EAA6B,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC9C,eAAO,CAAC,GAAR;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;;AAEA,eAAO,KAAP,CAAa,IAAI,MAAJ,CAAW,CAAX,EAAc,KAA3B,EAAkC,0BAAlC;AACA,eAAO,KAAP,CAAa,IAAI,QAAJ,CAAa,CAAb,EAAgB,KAA7B,EAAoC,gCAApC;AACA,eAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,OAVD;AAWD,KAZD;AAaD,GAlBD;;AAoBA,WAAS,QAAT,EAAmB,YAAW;AAC5B,WAAO,YAAW;AAChB,aAAO,CAAC,QAAD,CAAP;AACD,KAFD;;AAIA,OAAG,yCAAH,EAA8C,UAAS,IAAT,EAAe;AAC3D,UAAI,eAAJ,EAAqB,IAArB,EAA2B,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC5C,eAAO,CAAC,GAAR;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;;AAEA,eAAO,KAAP,CAAa,IAAI,MAAJ,CAAW,CAAX,EAAc,SAA3B,EACE,gCADF;AAEA,eAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,OAVD;AAWD,KAZD;AAaD,GAlBD;;AAoBA,WAAS,SAAT,EAAoB,YAAW;AAC7B,WAAO,YAAW;AAChB,aAAO,CAAC,SAAD,CAAP;AACD,KAFD;;AAIA,OAAG,qCAAH,EAA0C,UAAS,IAAT,EAAe;AACvD,UAAI,kBAAJ,EAAwB,IAAxB,EAA8B,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC/C,eAAO,CAAC,GAAR;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;;AAEA,eAAO,KAAP,CAAa,IAAI,MAAJ,CAAW,CAAX,EAAc,KAA3B,EACE,4CADF;AAEA,eAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,OAVD;AAWD,KAZD;;AAcA,OAAG,uDAAH,EAA4D,UAAS,IAAT,EAAe;AACzE,UAAI,uBAAJ,EAA6B,IAA7B,EAAmC,UAAS,GAAT,EAAc,GAAd,EAAmB;AACpD,eAAO,CAAC,GAAR;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;;AAEA,eAAO,KAAP,CAAa,IAAI,QAAJ,CAAa,CAAb,EAAgB,KAA7B,EACE,mCADF;AAEA,eAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,OAVD;AAWD,KAZD;AAaD,GAhCD;;AAkCA,WAAS,QAAT,EAAmB,YAAW;AAC5B,OAAG,8BAAH,EAAmC,UAAS,IAAT,EAAe;AAChD,aAAO,CAAC,QAAD,EAAW,OAAX,CAAP;AACA,UAAI,iBAAJ,EAAuB,IAAvB,EAA6B,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC9C,eAAO,CAAC,GAAR;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;AACA,eAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,OAPD;AAQD,KAVD;;AAYA,OAAG,8BAAH,EAAmC,UAAS,IAAT,EAAe;AAChD,aAAO,CAAC,QAAD,EAAW,IAAX,CAAP;AACA,UAAI,iBAAJ,EAAuB,IAAvB,EAA6B,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC9C,eAAO,CAAC,GAAR;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;AACA,eAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,OAPD;AAQD,KAVD;;AAYA,aAAS,eAAT,EAA0B,YAAW;AACnC,SAAG,0CAAH,EAA+C,UAAS,IAAT,EAAe;AAC5D,eAAO,CAAC,QAAD,EAAW,MAAX,EAAmB,UAAnB,CAAP;AACA,YAAI,iBAAJ,EAAuB,IAAvB,EAA6B,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC9C,iBAAO,CAAC,GAAR;AACA,iBAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,iBAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,iBAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;AACA,iBAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,SAPD;AAQD,OAVD;AAWD,KAZD;AAaD,GAtCD;;AAwCA,WAAS,WAAT,EAAsB,YAAW;AAC/B,OAAG,mCAAH,EAAwC,UAAU,IAAV,EAAgB;AACtD,aAAO,CAAC,WAAD,EAAc,GAAd,CAAP;AACA,UAAI,oBAAJ,EAA0B,IAA1B,EAAgC,UAAS,GAAT,EAAc,GAAd,EAAmB;AACjD,eAAO,CAAC,GAAR;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,KAAvB,EAA8B,CAA9B;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,CAAV,EAAa,YAA1B,EAAwC,CAAxC;AACA,eAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;AACA,eAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,OATD;AAUD,KAZD;AAaD,GAdD;AAeD,CArKD","file":"/packages/practicalmeteor:mocha/test/integration/options.js.map","sourcesContent":["var assert = require('assert');\nvar run    = require('./helpers').runMochaJSON;\nvar args   = [];\n\ndescribe('options', function() {\n  this.timeout(2000);\n\n  describe('--async-only', function() {\n\n    before(function() {\n      args = ['--async-only'];\n    });\n\n    it('should fail synchronous specs', function(done) {\n      run('options/async-only.sync.js', args, function(err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 0);\n        assert.equal(res.stats.failures, 1);\n\n        assert.equal(res.failures[0].title, 'throws an error');\n        assert.equal(res.code, 1);\n        done();\n      });\n    });\n\n    it('should allow asynchronous specs', function(done) {\n      run('options/async-only.async.js', args, function(err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 1);\n        assert.equal(res.stats.failures, 0);\n\n        assert.equal(res.passes[0].title, 'should pass');\n        assert.equal(res.code, 0);\n        done();\n      });\n    });\n  });\n\n  describe('--bail', function() {\n    before(function() {\n      args = ['--bail'];\n    });\n\n    it('should stop after the first error', function(done) {\n      run('options/bail.js', args, function(err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 1);\n        assert.equal(res.stats.failures, 1);\n\n        assert.equal(res.passes[0].title, 'should display this spec');\n        assert.equal(res.failures[0].title, 'should only display this error');\n        assert.equal(res.code, 1);\n        done();\n      });\n    });\n  });\n\n  describe('--sort', function() {\n    before(function() {\n      args = ['--sort'];\n    });\n\n    it('should sort tests in alphabetical order', function(done) {\n      run('options/sort*', args, function(err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 2);\n        assert.equal(res.stats.failures, 0);\n\n        assert.equal(res.passes[0].fullTitle,\n          'alpha should be executed first');\n        assert.equal(res.code, 0);\n        done();\n      });\n    });\n  });\n\n  describe('--delay', function() {\n    before(function() {\n      args = ['--delay'];\n    });\n\n    it('should run the generated test suite', function(done) {\n      run('options/delay.js', args, function(err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 2);\n        assert.equal(res.stats.failures, 0);\n\n        assert.equal(res.passes[0].title,\n          'should have waited 500ms to run this suite');\n        assert.equal(res.code, 0);\n        done();\n      });\n    });\n\n    it('should throw an error if the test suite failed to run', function(done) {\n      run('options/delay-fail.js', args, function(err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 0);\n        assert.equal(res.stats.failures, 1);\n\n        assert.equal(res.failures[0].title,\n          'Uncaught error outside test suite');\n        assert.equal(res.code, 1);\n        done();\n      });\n    });\n  });\n\n  describe('--grep', function() {\n    it('runs specs matching a string', function(done) {\n      args = ['--grep', 'match'];\n      run('options/grep.js', args, function(err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 2);\n        assert.equal(res.stats.failures, 0);\n        assert.equal(res.code, 0);\n        done();\n      });\n    });\n\n    it('runs specs matching a RegExp', function(done) {\n      args = ['--grep', '.*'];\n      run('options/grep.js', args, function(err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 2);\n        assert.equal(res.stats.failures, 1);\n        assert.equal(res.code, 1);\n        done();\n      });\n    });\n\n    describe('with --invert', function() {\n      it('runs specs that do not match the pattern', function(done) {\n        args = ['--grep', 'fail', '--invert'];\n        run('options/grep.js', args, function(err, res) {\n          assert(!err);\n          assert.equal(res.stats.pending, 0);\n          assert.equal(res.stats.passes, 2);\n          assert.equal(res.stats.failures, 0);\n          assert.equal(res.code, 0);\n          done();\n        });\n      });\n    });\n  });\n\n  describe('--retries', function() {\n    it('retries after a certain threshold', function (done) {\n      args = ['--retries', '3'];\n      run('options/retries.js', args, function(err, res) {\n        assert(!err);\n        assert.equal(res.stats.pending, 0);\n        assert.equal(res.stats.passes, 0);\n        assert.equal(res.stats.tests, 1);\n        assert.equal(res.tests[0].currentRetry, 3);\n        assert.equal(res.stats.failures, 1);\n        assert.equal(res.code, 1);\n        done();\n      });\n    })\n  });\n});\n"]},"hash":"15bc06c57af94281beabb705090b506ad69dcd05"}
