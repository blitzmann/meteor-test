{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/practicalmeteor:mocha/test/grep.js","filenameRelative":"/packages/practicalmeteor:mocha/test/grep.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/practicalmeteor:mocha/test/grep.js.map","sourceFileName":"/packages/practicalmeteor:mocha/test/grep.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"grep"},"ignored":false,"code":"var Mocha = require('../');\n\ndescribe('Mocha', function () {\n  describe('\"grep\" option', function () {\n    it('should add a RegExp to the mocha.options object', function () {\n      var mocha = new Mocha({ grep: /foo.*/ });\n      mocha.options.grep.toString().should.equal('/foo.*/');\n    });\n\n    it('should convert string to a RegExp', function () {\n      var mocha = new Mocha({ grep: 'foo.*' });\n      mocha.options.grep.toString().should.equal('/foo.*/');\n    });\n  });\n\n  describe('\"fgrep\" option', function () {\n    it('should escape and convert string to a RegExp', function () {\n      var mocha = new Mocha({ fgrep: 'foo.*' });\n      mocha.options.grep.toString().should.equal('/foo\\\\.\\\\*/');\n    });\n  });\n\n  describe('.grep()', function () {\n    it('should add a RegExp to the mocha.options object', function () {\n      var mocha = new Mocha();\n      mocha.grep(/foo/);\n      mocha.options.grep.toString().should.equal('/foo/');\n    });\n\n    it('should convert grep string to a RegExp', function () {\n      var mocha = new Mocha();\n      mocha.grep('foo');\n      mocha.options.grep.toString().should.equal('/foo/');\n    });\n\n    it('should return it\\'s parent Mocha object for chainability', function () {\n      var mocha = new Mocha();\n      mocha.grep().should.equal(mocha);\n    });\n  });\n\n  describe('\"invert\" option', function () {\n    it('should add a Boolean to the mocha.options object', function () {\n      var mocha = new Mocha({ invert: true });\n      mocha.options.invert.should.be.ok();\n    });\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/practicalmeteor:mocha/test/grep.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,KAAR,CAAZ;;AAEA,SAAS,OAAT,EAAkB,YAAU;AAC1B,WAAS,eAAT,EAA0B,YAAU;AAClC,OAAG,iDAAH,EAAsD,YAAU;AAC9D,UAAI,QAAQ,IAAI,KAAJ,CAAU,EAAE,MAAM,OAAR,EAAV,CAAZ;AACA,YAAM,OAAN,CAAc,IAAd,CAAmB,QAAnB,GAA8B,MAA9B,CAAqC,KAArC,CAA2C,SAA3C;AACD,KAHD;;AAKA,OAAG,mCAAH,EAAwC,YAAU;AAChD,UAAI,QAAQ,IAAI,KAAJ,CAAU,EAAE,MAAM,OAAR,EAAV,CAAZ;AACA,YAAM,OAAN,CAAc,IAAd,CAAmB,QAAnB,GAA8B,MAA9B,CAAqC,KAArC,CAA2C,SAA3C;AACD,KAHD;AAID,GAVD;;AAYA,WAAS,gBAAT,EAA2B,YAAU;AACnC,OAAG,8CAAH,EAAmD,YAAU;AAC3D,UAAI,QAAQ,IAAI,KAAJ,CAAU,EAAE,OAAO,OAAT,EAAV,CAAZ;AACA,YAAM,OAAN,CAAc,IAAd,CAAmB,QAAnB,GAA8B,MAA9B,CAAqC,KAArC,CAA2C,aAA3C;AACD,KAHD;AAID,GALD;;AAOA,WAAS,SAAT,EAAoB,YAAU;AAC5B,OAAG,iDAAH,EAAsD,YAAU;AAC9D,UAAI,QAAQ,IAAI,KAAJ,EAAZ;AACA,YAAM,IAAN,CAAW,KAAX;AACA,YAAM,OAAN,CAAc,IAAd,CAAmB,QAAnB,GAA8B,MAA9B,CAAqC,KAArC,CAA2C,OAA3C;AACD,KAJD;;AAMA,OAAG,wCAAH,EAA6C,YAAU;AACrD,UAAI,QAAQ,IAAI,KAAJ,EAAZ;AACA,YAAM,IAAN,CAAW,KAAX;AACA,YAAM,OAAN,CAAc,IAAd,CAAmB,QAAnB,GAA8B,MAA9B,CAAqC,KAArC,CAA2C,OAA3C;AACD,KAJD;;AAMA,OAAG,0DAAH,EAA+D,YAAU;AACvE,UAAI,QAAQ,IAAI,KAAJ,EAAZ;AACA,YAAM,IAAN,GAAa,MAAb,CAAoB,KAApB,CAA0B,KAA1B;AACD,KAHD;AAID,GAjBD;;AAmBA,WAAS,iBAAT,EAA4B,YAAU;AACpC,OAAG,kDAAH,EAAuD,YAAU;AAC/D,UAAI,QAAQ,IAAI,KAAJ,CAAU,EAAE,QAAQ,IAAV,EAAV,CAAZ;AACA,YAAM,OAAN,CAAc,MAAd,CAAqB,MAArB,CAA4B,EAA5B,CAA+B,EAA/B;AACD,KAHD;AAID,GALD;AAMD,CA7CD","file":"/packages/practicalmeteor:mocha/test/grep.js.map","sourcesContent":["var Mocha = require('../');\n\ndescribe('Mocha', function(){\n  describe('\"grep\" option', function(){\n    it('should add a RegExp to the mocha.options object', function(){\n      var mocha = new Mocha({ grep: /foo.*/ });\n      mocha.options.grep.toString().should.equal('/foo.*/');\n    })\n\n    it('should convert string to a RegExp', function(){\n      var mocha = new Mocha({ grep: 'foo.*' });\n      mocha.options.grep.toString().should.equal('/foo.*/');\n    })\n  })\n\n  describe('\"fgrep\" option', function(){\n    it('should escape and convert string to a RegExp', function(){\n      var mocha = new Mocha({ fgrep: 'foo.*' });\n      mocha.options.grep.toString().should.equal('/foo\\\\.\\\\*/');\n    })\n  })\n\n  describe('.grep()', function(){\n    it('should add a RegExp to the mocha.options object', function(){\n      var mocha = new Mocha;\n      mocha.grep(/foo/);\n      mocha.options.grep.toString().should.equal('/foo/');\n    })\n\n    it('should convert grep string to a RegExp', function(){\n      var mocha = new Mocha;\n      mocha.grep('foo');\n      mocha.options.grep.toString().should.equal('/foo/');\n    })\n\n    it('should return it\\'s parent Mocha object for chainability', function(){\n      var mocha = new Mocha;\n      mocha.grep().should.equal(mocha);\n    })\n  })\n\n  describe('\"invert\" option', function(){\n    it('should add a Boolean to the mocha.options object', function(){\n      var mocha = new Mocha({ invert: true });\n      mocha.options.invert.should.be.ok();\n    })\n  })\n})\n"]},"hash":"33755373511ea456f6db93c1be813a6cf16d7b32"}
