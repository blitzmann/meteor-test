{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/practicalmeteor:mocha/test/integration/retries.js","filenameRelative":"/packages/practicalmeteor:mocha/test/integration/retries.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/practicalmeteor:mocha/test/integration/retries.js.map","sourceFileName":"/packages/practicalmeteor:mocha/test/integration/retries.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"retries"},"ignored":false,"code":"var assert = require('assert');\nvar helpers = require('./helpers');\nvar args = [];\n\ndescribe('retries', function () {\n  this.timeout(2000);\n\n  it('are ran in correct order', function (done) {\n    helpers.runMocha('retries/hooks.js', args, function (err, res) {\n      var lines, expected;\n\n      assert(!err);\n\n      lines = res.output.split(/[\\n․]+/).map(function (line) {\n        return line.trim();\n      }).filter(function (line) {\n        return line.length;\n      }).slice(0, -1);\n\n      expected = ['before', 'before each 0', 'TEST 0', 'after each 1', 'before each 1', 'TEST 1', 'after each 2', 'before each 2', 'TEST 2', 'after each 3', 'before each 3', 'TEST 3', 'after each 4', 'before each 4', 'TEST 4', 'after each 5', 'after'];\n\n      expected.forEach(function (line, i) {\n        assert.equal(lines[i], line);\n      });\n\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n\n  it('should exit early if test passes', function (done) {\n    helpers.runMochaJSON('retries/early-pass.js', args, function (err, res) {\n      assert(!err);\n      assert.equal(res.stats.passes, 1);\n      assert.equal(res.stats.failures, 0);\n      assert.equal(res.tests[0].currentRetry, 1);\n      assert.equal(res.stats.tests, 1);\n      assert.equal(res.code, 0);\n      done();\n    });\n  });\n\n  it('should let test override', function (done) {\n    helpers.runMochaJSON('retries/nested.js', args, function (err, res) {\n      assert(!err);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 1);\n      assert.equal(res.stats.tests, 1);\n      assert.equal(res.tests[0].currentRetry, 1);\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n\n  it('should not hang w/ async test', function (done) {\n    helpers.runMocha('retries/async.js', args, function (err, res) {\n      var lines, expected;\n\n      assert(!err);\n\n      lines = res.output.split(/[\\n․]+/).map(function (line) {\n        return line.trim();\n      }).filter(function (line) {\n        return line.length;\n      }).slice(0, -1);\n\n      expected = ['before', 'before each 0', 'TEST 0', 'after each 1', 'before each 1', 'TEST 1', 'after each 2', 'before each 2', 'TEST 2', 'after each 3', 'after'];\n\n      expected.forEach(function (line, i) {\n        assert.equal(lines[i], line);\n      });\n\n      assert.equal(res.code, 0);\n      done();\n    });\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/practicalmeteor:mocha/test/integration/retries.js"],"names":[],"mappings":"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","file":"/packages/practicalmeteor:mocha/test/integration/retries.js.map","sourcesContent":["var assert = require('assert');\nvar helpers = require('./helpers');\nvar args   = [];\n\ndescribe('retries', function() {\n  this.timeout(2000);\n\n  it('are ran in correct order', function(done) {\n    helpers.runMocha('retries/hooks.js', args, function(err, res) {\n      var lines, expected;\n\n      assert(!err);\n\n      lines = res.output.split(/[\\n․]+/).map(function(line) {\n        return line.trim();\n      }).filter(function(line) {\n        return line.length;\n      }).slice(0, -1);\n\n      expected = [\n        'before',\n        'before each 0',\n        'TEST 0',\n        'after each 1',\n        'before each 1',\n        'TEST 1',\n        'after each 2',\n        'before each 2',\n        'TEST 2',\n        'after each 3',\n        'before each 3',\n        'TEST 3',\n        'after each 4',\n        'before each 4',\n        'TEST 4',\n        'after each 5',\n        'after'\n      ];\n\n      expected.forEach(function(line, i) {\n        assert.equal(lines[i], line);\n      });\n\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n\n  it('should exit early if test passes', function (done) {\n    helpers.runMochaJSON('retries/early-pass.js', args, function(err, res) {\n      assert(!err);\n      assert.equal(res.stats.passes, 1);\n      assert.equal(res.stats.failures, 0);\n      assert.equal(res.tests[0].currentRetry, 1);\n      assert.equal(res.stats.tests, 1);\n      assert.equal(res.code, 0);\n      done();\n    });\n  });\n\n  it('should let test override', function (done) {\n    helpers.runMochaJSON('retries/nested.js', args, function(err, res) {\n      assert(!err);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 1);\n      assert.equal(res.stats.tests, 1);\n      assert.equal(res.tests[0].currentRetry, 1);\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n\n  it('should not hang w/ async test', function (done) {\n    helpers.runMocha('retries/async.js', args, function(err, res) {\n      var lines, expected;\n\n      assert(!err);\n\n      lines = res.output.split(/[\\n․]+/).map(function(line) {\n        return line.trim();\n      }).filter(function(line) {\n        return line.length;\n      }).slice(0, -1);\n\n      expected = [\n        'before',\n        'before each 0',\n        'TEST 0',\n        'after each 1',\n        'before each 1',\n        'TEST 1',\n        'after each 2',\n        'before each 2',\n        'TEST 2',\n        'after each 3',\n        'after'\n      ];\n\n      expected.forEach(function(line, i) {\n        assert.equal(lines[i], line);\n      });\n\n      assert.equal(res.code, 0);\n      done();\n    });\n  });\n});\n"]},"hash":"fb7e105c11aa7b15f1696a83a09cad09f5d11597"}
