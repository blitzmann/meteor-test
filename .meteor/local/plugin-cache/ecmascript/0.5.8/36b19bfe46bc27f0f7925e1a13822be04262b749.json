{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/practicalmeteor:mocha/test/reporters/base.js","filenameRelative":"/packages/practicalmeteor:mocha/test/reporters/base.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/practicalmeteor:mocha/test/reporters/base.js.map","sourceFileName":"/packages/practicalmeteor:mocha/test/reporters/base.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"base"},"ignored":false,"code":"var Base = require('../../lib/reporters/base'),\n    Assert = require('assert').AssertionError;\n\nfunction makeTest(err) {\n  return {\n    err: err,\n    fullTitle: function fullTitle() {\n      return 'test title';\n    }\n  };\n}\n\ndescribe('Base reporter', function () {\n  var stdout, stdoutWrite, useColors;\n\n  beforeEach(function () {\n    stdout = [];\n    stdoutWrite = process.stdout.write;\n    process.stdout.write = function (string) {\n      stdout.push(string);\n    };\n    useColors = Base.useColors;\n    Base.useColors = false;\n  });\n\n  afterEach(function () {\n    process.stdout.write = stdoutWrite;\n    Base.useColors = useColors;\n  });\n\n  describe('showDiff', function () {\n    it('should show diffs by default', function () {\n      var err = new Assert({ actual: 'foo', expected: 'bar' }),\n          errOut;\n\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.match(/\\- actual/);\n      errOut.should.match(/\\+ expected/);\n    });\n\n    it('should show diffs if property set to `true`', function () {\n      var err = new Assert({ actual: 'foo', expected: 'bar' }),\n          errOut;\n\n      err.showDiff = true;\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.match(/\\- actual/);\n      errOut.should.match(/\\+ expected/);\n    });\n\n    it('should not show diffs when showDiff property set to `false`', function () {\n      var err = new Assert({ actual: 'foo', expected: 'bar' }),\n          errOut;\n\n      err.showDiff = false;\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.not.match(/\\- actual/);\n      errOut.should.not.match(/\\+ expected/);\n    });\n\n    it('should not show diffs when expected is not defined', function () {\n      var err = new Error('ouch'),\n          errOut;\n\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.not.match(/\\- actual/);\n      errOut.should.not.match(/\\+ expected/);\n    });\n  });\n\n  describe('Getting two strings', function () {\n    // Fix regression V1.2.1(see: issue #1241)\n    it('should show strings diff as is', function () {\n      var err = new Error('test'),\n          errOut;\n\n      err.actual = 'foo\\nbar';\n      err.expected = 'foo\\nbaz';\n      err.showDiff = true;\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n\n      errOut.should.not.match(/\"foo\\\\nbar\"/);\n      errOut.should.match(/foo/).and.match(/bar/);\n      errOut.should.match(/test/);\n      errOut.should.match(/actual/);\n      errOut.should.match(/expected/);\n    });\n  });\n\n  it('should stringify objects', function () {\n    var err = new Error('test'),\n        errOut;\n\n    err.actual = { key: \"a1\" };\n    err.expected = { key: \"e1\" };\n    err.showDiff = true;\n    var test = makeTest(err);\n\n    Base.list([test]);\n\n    errOut = stdout.join('\\n');\n    errOut.should.match(/\"key\"/);\n    errOut.should.match(/test/);\n    errOut.should.match(/\\- actual/);\n    errOut.should.match(/\\+ expected/);\n  });\n\n  it('should remove message from stack', function () {\n    var err = {\n      message: 'Error',\n      stack: 'Error\\nfoo\\nbar',\n      showDiff: false\n    };\n    var test = makeTest(err);\n\n    Base.list([test]);\n\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     Error\\n  foo\\n  bar');\n  });\n\n  it('should use the inspect() property if `message` is not set', function () {\n    var err = {\n      showDiff: false,\n      inspect: function inspect() {\n        return 'an error happened';\n      }\n    };\n    var test = makeTest(err);\n    Base.list([test]);\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     an error happened');\n  });\n\n  it('should not modify stack if it does not contain message', function () {\n    var err = {\n      message: 'Error',\n      stack: 'foo\\nbar',\n      showDiff: false\n    };\n    var test = makeTest(err);\n\n    Base.list([test]);\n\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     Error\\n  foo\\n  bar');\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/practicalmeteor:mocha/test/reporters/base.js"],"names":[],"mappings":"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","file":"/packages/practicalmeteor:mocha/test/reporters/base.js.map","sourcesContent":["var Base   = require('../../lib/reporters/base')\n  , Assert = require('assert').AssertionError;\n\nfunction makeTest(err) {\n  return {\n    err: err,\n    fullTitle: function () {\n      return 'test title';\n    }\n  };\n}\n\ndescribe('Base reporter', function () {\n  var stdout\n    , stdoutWrite\n    , useColors;\n\n  beforeEach(function () {\n    stdout = [];\n    stdoutWrite = process.stdout.write;\n    process.stdout.write = function (string) {\n      stdout.push(string);\n    };\n    useColors = Base.useColors;\n    Base.useColors = false;\n  });\n\n  afterEach(function () {\n    process.stdout.write = stdoutWrite;\n    Base.useColors = useColors;\n  });\n\n  describe('showDiff', function() {\n    it('should show diffs by default', function () {\n      var err = new Assert({ actual: 'foo', expected: 'bar' })\n        , errOut;\n\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.match(/\\- actual/);\n      errOut.should.match(/\\+ expected/);\n    });\n\n    it('should show diffs if property set to `true`', function () {\n      var err = new Assert({ actual: 'foo', expected: 'bar' })\n        , errOut;\n\n      err.showDiff = true;\n      var test = makeTest(err);\n\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.match(/\\- actual/);\n      errOut.should.match(/\\+ expected/);\n    });\n\n    it('should not show diffs when showDiff property set to `false`', function () {\n      var err = new Assert({ actual: 'foo', expected: 'bar' })\n        , errOut;\n\n      err.showDiff = false;\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.not.match(/\\- actual/);\n      errOut.should.not.match(/\\+ expected/);\n    });\n\n    it('should not show diffs when expected is not defined', function () {\n      var err = new Error('ouch')\n        , errOut;\n\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n      errOut.should.not.match(/\\- actual/);\n      errOut.should.not.match(/\\+ expected/);\n    });\n\n  });\n\n  describe('Getting two strings', function() {\n    // Fix regression V1.2.1(see: issue #1241)\n    it('should show strings diff as is', function () {\n      var err = new Error('test'),\n        errOut;\n\n      err.actual = 'foo\\nbar';\n      err.expected = 'foo\\nbaz';\n      err.showDiff = true;\n      var test = makeTest(err);\n\n      Base.list([test]);\n\n      errOut = stdout.join('\\n');\n\n      errOut.should.not.match(/\"foo\\\\nbar\"/);\n      errOut.should.match(/foo/).and.match(/bar/);\n      errOut.should.match(/test/);\n      errOut.should.match(/actual/);\n      errOut.should.match(/expected/);\n    });\n  });\n\n  it('should stringify objects', function () {\n    var err = new Error('test'),\n      errOut;\n\n    err.actual = {key:\"a1\"};\n    err.expected = {key:\"e1\"};\n    err.showDiff = true;\n    var test = makeTest(err);\n\n    Base.list([test]);\n\n    errOut = stdout.join('\\n');\n    errOut.should.match(/\"key\"/);\n    errOut.should.match(/test/);\n    errOut.should.match(/\\- actual/);\n    errOut.should.match(/\\+ expected/);\n  });\n\n  it('should remove message from stack', function () {\n    var err = {\n      message: 'Error',\n      stack: 'Error\\nfoo\\nbar',\n      showDiff: false\n    };\n    var test = makeTest(err);\n\n    Base.list([test]);\n\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     Error\\n  foo\\n  bar');\n  });\n\n  it('should use the inspect() property if `message` is not set', function () {\n    var err = {\n      showDiff: false,\n      inspect: function() { return 'an error happened'; },\n    };\n    var test = makeTest(err);\n    Base.list([test]);\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     an error happened');\n  });\n\n  it('should not modify stack if it does not contain message', function () {\n    var err = {\n      message: 'Error',\n      stack: 'foo\\nbar',\n      showDiff: false\n    };\n    var test = makeTest(err);\n\n    Base.list([test]);\n\n    var errOut = stdout.join('\\n').trim();\n    errOut.should.equal('1) test title:\\n     Error\\n  foo\\n  bar');\n  });\n\n});\n"]},"hash":"36b19bfe46bc27f0f7925e1a13822be04262b749"}
