{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"fibers","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Fiber"}]},{"source":"./setup","imported":[],"specifiers":[]},{"source":"mocha","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Mocha"}]},{"source":"./cleanup","imported":[],"specifiers":[]}],"exports":{"exported":["mochaInstance","setupGlobals","Mocha"],"specifiers":[{"kind":"local","local":"mochaInstance","exported":"mochaInstance"},{"kind":"local","local":"setupGlobals","exported":"setupGlobals"},{"kind":"local","local":"Mocha","exported":"Mocha"}]}}},"options":{"filename":"/packages/practicalmeteor:mocha-core/server.js","filenameRelative":"/packages/practicalmeteor:mocha-core/server.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/practicalmeteor:mocha-core/server.js.map","sourceFileName":"/packages/practicalmeteor:mocha-core/server.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"server"},"ignored":false,"code":"module.export({mochaInstance:function(){return mochaInstance},setupGlobals:function(){return setupGlobals},Mocha:function(){return Mocha}});var Fiber;module.import('fibers',{\"default\":function(v){Fiber=v}});module.import(\"./setup\");var Mocha;module.import('mocha',{\"default\":function(v){Mocha=v}});module.import(\"./cleanup\");\n\n\n\n\nfunction setupGlobals(mocha) {\n  var mochaExports = {};\n  mocha.suite.emit('pre-require', mochaExports, undefined, mocha);\n\n  // 1. patch up it and hooks functions so it plays nice w/ fibers\n  // 2. trick to allow binding the suite instance as `this` value\n  // inside of suites blocks, to allow e.g. to set custom timeouts.\n  var wrapRunnable = function wrapRunnable(fn) {\n    //In Meteor, these blocks will all be invoking Meteor code and must\n    //run within a fiber. We must therefore wrap each with something like\n    //bindEnvironment. The function passed off to mocha must have length\n    //greater than zero if we want mocha to run it asynchronously. That's\n    //why it uses the Fibers\n\n    //We're actually having mocha run all tests asynchronously. This\n    //is because mocha cannot tell when a synchronous fiber test has\n    //finished, because the test runner runs outside a fiber.\n\n    //It is possible that the mocha test runner could be run from within a\n    //fiber, but it was unclear to me how that could be done without\n    //forking mocha itself.\n\n    var wrappedFunction = function wrappedFunction(done) {\n      var self = this._runnable;\n      var run = function run() {\n        try {\n          // Sync call\n          if (fn.length == 0) {\n            var result = fn.call(self);\n            if (result && typeof result.then === 'function') {\n              self.resetTimeout();\n              result.then(function () {\n                done();\n                // Return null so libraries like bluebird do not warn about\n                // subsequently constructed Promises.\n                return null;\n              }, function (reason) {\n                done(reason || new Error('Promise rejected with no or falsy reason'));\n              });\n            } else {\n              if (self.asyncOnly) {\n                return done(new Error('--async-only option in use without declaring `done()` or returning a promise'));\n              }\n\n              done();\n            }\n          } else {\n            fn.call(self, done);\n          }\n        } catch (error) {\n          done(error);\n        }\n      };\n\n      if (Fiber.current) return run();\n      Fiber(run).run();\n    };\n\n    // Show original function source code\n    wrappedFunction.toString = function () {\n      return fn.toString();\n    };\n    return wrappedFunction;\n  };\n\n  mochaExports[\"__org_it\"] = mochaExports[\"it\"];\n  mochaExports['it'] = function (name, func) {\n    // You can create pending tests without a function\n    // http://mochajs.org/#pending-tests\n    // i.e pending test\n    // it('this is a pending test');\n    if (func) {\n      func = wrapRunnable(func);\n    }\n    return mochaExports[\"__org_it\"](name, func);\n  };\n  mochaExports.it.skip = mochaExports[\"__org_it\"].skip;\n  mochaExports.it.only = function (name, func) {\n    mochaExports[\"__org_it\"].only(name, wrapRunnable(func));\n  };\n\n  var hooks = [\"before\", \"beforeEach\", \"after\", \"afterEach\"];\n  hooks.forEach(function (hook) {\n    mochaExports['__org_' + hook] = mochaExports[hook];\n    mochaExports[hook] = function (func) {\n      return mochaExports['__org_' + hook](wrapRunnable(func));\n    };\n  });\n\n  Object.keys(mochaExports).forEach(function (key) {\n    // We don't want original function to be export to global namespace\n    if (key.indexOf(\"__org_\") > -1 || key.indexOf(\"run\") > -1) {\n      return;\n    }\n    global[key] = mochaExports[key];\n  });\n};\n\n// Initialize a new `Mocha` test runner instance that test driver packages\n// can use to ensure they work well with other test driver packages.\nvar mochaInstance = new Mocha({\n  ui: 'bdd',\n  ignoreLeaks: true\n});\nsetupGlobals(mochaInstance);\n\n","ast":null,"map":{"version":3,"sources":["/packages/practicalmeteor:mocha-core/server.js"],"names":[],"mappings":"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","file":"/packages/practicalmeteor:mocha-core/server.js.map","sourcesContent":["import Fiber from 'fibers';\nimport \"./setup\"\nimport Mocha from 'mocha';\nimport \"./cleanup\"\n\nfunction setupGlobals(mocha) {\n  var mochaExports = {};\n  mocha.suite.emit('pre-require', mochaExports, undefined, mocha);\n\n  // 1. patch up it and hooks functions so it plays nice w/ fibers\n  // 2. trick to allow binding the suite instance as `this` value\n  // inside of suites blocks, to allow e.g. to set custom timeouts.\n  var wrapRunnable = function (fn) {\n    //In Meteor, these blocks will all be invoking Meteor code and must\n    //run within a fiber. We must therefore wrap each with something like\n    //bindEnvironment. The function passed off to mocha must have length\n    //greater than zero if we want mocha to run it asynchronously. That's\n    //why it uses the Fibers\n\n    //We're actually having mocha run all tests asynchronously. This\n    //is because mocha cannot tell when a synchronous fiber test has\n    //finished, because the test runner runs outside a fiber.\n\n    //It is possible that the mocha test runner could be run from within a\n    //fiber, but it was unclear to me how that could be done without\n    //forking mocha itself.\n\n    const wrappedFunction = function (done) {\n      var self = this._runnable;\n      var run = function() {\n        try {\n          // Sync call\n          if (fn.length == 0) {\n            var result = fn.call(self);\n            if (result && typeof result.then === 'function') {\n              self.resetTimeout();\n              result\n                .then(function() {\n                    done();\n                    // Return null so libraries like bluebird do not warn about\n                    // subsequently constructed Promises.\n                    return null;\n                  },\n                  function(reason) {\n                    done(reason || new Error('Promise rejected with no or falsy reason'));\n                  });\n            } else {\n              if (self.asyncOnly) {\n                return done(new Error('--async-only option in use without declaring `done()` or returning a promise'));\n              }\n\n              done();\n            }\n          }\n          else {\n            fn.call(self, done);\n          }\n        } catch (error) {\n          done(error);\n        }\n      };\n\n      if (Fiber.current) return run();\n      Fiber(run).run();\n    };\n\n    // Show original function source code\n    wrappedFunction.toString = function () { return fn.toString() };\n    return wrappedFunction;\n  };\n\n  mochaExports[\"__org_it\"] = mochaExports[\"it\"];\n  mochaExports['it'] = function (name, func) {\n    // You can create pending tests without a function\n    // http://mochajs.org/#pending-tests\n    // i.e pending test\n    // it('this is a pending test');\n    if (func) {\n      func = wrapRunnable(func);\n    }\n    return mochaExports[\"__org_it\"](name, func);\n  };\n  mochaExports.it.skip = mochaExports[\"__org_it\"].skip;\n  mochaExports.it.only = (name, func) => {\n    mochaExports[\"__org_it\"].only(name, wrapRunnable(func));\n  };\n\n\n  let hooks = [\"before\", \"beforeEach\", \"after\", \"afterEach\"];\n  hooks.forEach((hook)=> {\n    mochaExports[`__org_${hook}`] = mochaExports[hook];\n    mochaExports[hook] = (func)=> {\n     return  mochaExports[`__org_${hook}`](wrapRunnable(func));\n    }\n  });\n\n  Object.keys(mochaExports).forEach((key)=>{\n    // We don't want original function to be export to global namespace\n    if(key.indexOf(\"__org_\") > -1 || key.indexOf(\"run\") > -1){\n      return;\n    }\n    global[key] = mochaExports[key];\n  })\n\n};\n\n// Initialize a new `Mocha` test runner instance that test driver packages\n// can use to ensure they work well with other test driver packages.\nconst mochaInstance = new Mocha({\n  ui: 'bdd',\n  ignoreLeaks: true\n});\nsetupGlobals(mochaInstance);\n \nexport { mochaInstance, setupGlobals, Mocha };\n"]},"hash":"e45fbc21fdf0ed2062c09b63b114c8678569a0c8"}
