{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]}],"exports":{"exported":["Tasks"],"specifiers":[{"kind":"local","local":"Tasks","exported":"Tasks"}]}}},"options":{"filename":"/imports/api/tasks.js","filenameRelative":"/imports/api/tasks.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/tasks.js.map","sourceFileName":"/imports/api/tasks.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"tasks"},"ignored":false,"code":"module.export({Tasks:function(){return Tasks}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n\n\n\nvar Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [{\n        'private': {\n          $ne: true\n        }\n      }, {\n        owner: this.userId\n      }]\n    });\n  });\n}\n\nMeteor.methods({\n  'tasks.insert': function tasksInsert(text) {\n    check(text, String);\n\n    // Make sure the user is logged in before inserting a task\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.insert({\n      text: text,\n      createdAt: new Date(),\n      owner: Meteor.userId(),\n      username: Meteor.user().username\n    });\n  },\n  'tasks.remove': function tasksRemove(taskId) {\n    check(taskId, String);\n\n    var task = Tasks.findOne(taskId);\n    if (task['private'] && task.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n  'tasks.setPrivate': function tasksSetPrivate(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n\n    var task = Tasks.findOne(taskId);\n\n    // Make sure only the task owner can make a task private\n    if (task.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, {\n      $set: {\n        'private': setToPrivate\n      }\n    });\n  },\n  'tasks.setChecked': function tasksSetChecked(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n\n    var task = Tasks.findOne(taskId);\n    if (task['private'] && task.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, {\n      $set: {\n        checked: setChecked\n      }\n    });\n  }\n});","ast":null,"map":{"version":3,"sources":["/imports/api/tasks.js"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,QAAQ,IAAI,MAAM,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAI,OAAO,QAAX,EAAqB;;;AAGnB,SAAO,OAAP,CAAe,OAAf,EAAwB,SAAS,gBAAT,GAA4B;AAClD,WAAO,MAAM,IAAN,CAAW;AAChB,WAAK,CAAC;AACJ,mBAAS;AACP,eAAK;AADE;AADL,OAAD,EAIF;AACD,eAAO,KAAK;AADX,OAJE;AADW,KAAX,CAAP;AASD,GAVD;AAWD;;AAED,OAAO,OAAP,CAAe;AACb,gBADa,uBACG,IADH,EACS;AACpB,UAAM,IAAN,EAAY,MAAZ;;;AAGA,QAAI,CAAC,OAAO,MAAP,EAAL,EAAsB;AACpB,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa;AACX,gBADW;AAEX,iBAAW,IAAI,IAAJ,EAFA;AAGX,aAAO,OAAO,MAAP,EAHI;AAIX,gBAAU,OAAO,IAAP,GAAc;AAJb,KAAb;AAMD,GAfY;AAgBb,gBAhBa,uBAgBG,MAhBH,EAgBW;AACtB,UAAM,MAAN,EAAc,MAAd;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,QAAI,mBAAgB,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnC,EAAoD;;AAElD,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb;AACD,GA1BY;AA2Bb,oBA3Ba,2BA2BO,MA3BP,EA2Be,YA3Bf,EA2B6B;AACxC,UAAM,MAAN,EAAc,MAAd;AACA,UAAM,YAAN,EAAoB,OAApB;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;;;AAGA,QAAI,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnB,EAAoC;AAClC,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb,EAAqB;AACnB,YAAM;AACJ,mBAAS;AADL;AADa,KAArB;AAKD,GA3CY;AA4Cb,oBA5Ca,2BA4CO,MA5CP,EA4Ce,UA5Cf,EA4C2B;AACtC,UAAM,MAAN,EAAc,MAAd;AACA,UAAM,UAAN,EAAkB,OAAlB;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACG,QAAI,mBAAgB,KAAK,KAAL,KAAe,OAAO,MAAP,EAAnC,EAAoD;;AAElD,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEJ,UAAM,MAAN,CAAa,MAAb,EAAqB;AACnB,YAAM;AACJ,iBAAS;AADL;AADa,KAArB;AAKD;AA3DY,CAAf","file":"/imports/api/tasks.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\n\r\nif (Meteor.isServer) {\r\n  // This code only runs on the server\r\n  // Only publish tasks that are public or belong to the current user\r\n  Meteor.publish('tasks', function tasksPublication() {\r\n    return Tasks.find({\r\n      $or: [{\r\n        private: {\r\n          $ne: true\r\n        }\r\n      }, {\r\n        owner: this.userId\r\n      }, ],\r\n    });\r\n  });\r\n}\r\n\r\nMeteor.methods({\r\n  'tasks.insert' (text) {\r\n    check(text, String);\r\n\r\n    // Make sure the user is logged in before inserting a task\r\n    if (!Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      owner: Meteor.userId(),\r\n      username: Meteor.user().username,\r\n    });\r\n  },\r\n  'tasks.remove' (taskId) {\r\n    check(taskId, String);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n      // If the task is private, make sure only the owner can delete it\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.remove(taskId);\r\n  },\r\n  'tasks.setPrivate' (taskId, setToPrivate) {\r\n    check(taskId, String);\r\n    check(setToPrivate, Boolean);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n\r\n    // Make sure only the task owner can make a task private\r\n    if (task.owner !== Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\r\n    Tasks.update(taskId, {\r\n      $set: {\r\n        private: setToPrivate\r\n      }\r\n    });\r\n  },\r\n  'tasks.setChecked' (taskId, setChecked) {\r\n    check(taskId, String);\r\n    check(setChecked, Boolean);\r\n\r\n    const task = Tasks.findOne(taskId);\r\n       if (task.private && task.owner !== Meteor.userId()) {\r\n         // If the task is private, make sure only the owner can check it off\r\n         throw new Meteor.Error('not-authorized');\r\n       }\r\n\r\n    Tasks.update(taskId, {\r\n      $set: {\r\n        checked: setChecked\r\n      }\r\n    });\r\n  },\r\n});\r\n"]},"hash":"66f70bc82dd84995b97934417bbd8e1417c74843"}
