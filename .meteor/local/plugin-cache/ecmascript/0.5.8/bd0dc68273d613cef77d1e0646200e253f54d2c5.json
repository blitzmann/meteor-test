{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/practicalmeteor:mocha/test/integration/uncaught.js","filenameRelative":"/packages/practicalmeteor:mocha/test/integration/uncaught.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/practicalmeteor:mocha/test/integration/uncaught.js.map","sourceFileName":"/packages/practicalmeteor:mocha/test/integration/uncaught.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"uncaught"},"ignored":false,"code":"var assert = require('assert');\nvar run = require('./helpers').runMochaJSON;\nvar args = [];\n\ndescribe('uncaught exceptions', function () {\n  this.timeout(1000);\n\n  it('handles uncaught exceptions from hooks', function (done) {\n    run('uncaught.hook.js', args, function (err, res) {\n      assert(!err);\n      assert.equal(res.stats.pending, 0);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 1);\n\n      assert.equal(res.failures[0].fullTitle, 'uncaught \"before each\" hook');\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n\n  it('handles uncaught exceptions from async specs', function (done) {\n    run('uncaught.js', args, function (err, res) {\n      assert(!err);\n      assert.equal(res.stats.pending, 0);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 2);\n\n      assert.equal(res.failures[0].title, 'fails exactly once when a global error is thrown first');\n      assert.equal(res.failures[1].title, 'fails exactly once when a global error is thrown second');\n      assert.equal(res.code, 2);\n      done();\n    });\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/practicalmeteor:mocha/test/integration/uncaught.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,MAAS,QAAQ,WAAR,EAAqB,YAAlC;AACA,IAAI,OAAS,EAAb;;AAEA,SAAS,qBAAT,EAAgC,YAAW;AACzC,OAAK,OAAL,CAAa,IAAb;;AAEA,KAAG,wCAAH,EAA6C,UAAS,IAAT,EAAe;AAC1D,QAAI,kBAAJ,EAAwB,IAAxB,EAA8B,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC/C,aAAO,CAAC,GAAR;AACA,aAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,aAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,aAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;;AAEA,aAAO,KAAP,CAAa,IAAI,QAAJ,CAAa,CAAb,EAAgB,SAA7B,EACE,6BADF;AAEA,aAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,KAVD;AAWD,GAZD;;AAcA,KAAG,8CAAH,EAAmD,UAAS,IAAT,EAAe;AAChE,QAAI,aAAJ,EAAmB,IAAnB,EAAyB,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC1C,aAAO,CAAC,GAAR;AACA,aAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,OAAvB,EAAgC,CAAhC;AACA,aAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAvB,EAA+B,CAA/B;AACA,aAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,QAAvB,EAAiC,CAAjC;;AAEA,aAAO,KAAP,CAAa,IAAI,QAAJ,CAAa,CAAb,EAAgB,KAA7B,EACE,wDADF;AAEA,aAAO,KAAP,CAAa,IAAI,QAAJ,CAAa,CAAb,EAAgB,KAA7B,EACE,yDADF;AAEA,aAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,CAAvB;AACA;AACD,KAZD;AAaD,GAdD;AAeD,CAhCD","file":"/packages/practicalmeteor:mocha/test/integration/uncaught.js.map","sourcesContent":["var assert = require('assert');\nvar run    = require('./helpers').runMochaJSON;\nvar args   = [];\n\ndescribe('uncaught exceptions', function() {\n  this.timeout(1000);\n\n  it('handles uncaught exceptions from hooks', function(done) {\n    run('uncaught.hook.js', args, function(err, res) {\n      assert(!err);\n      assert.equal(res.stats.pending, 0);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 1);\n\n      assert.equal(res.failures[0].fullTitle,\n        'uncaught \"before each\" hook');\n      assert.equal(res.code, 1);\n      done();\n    });\n  });\n\n  it('handles uncaught exceptions from async specs', function(done) {\n    run('uncaught.js', args, function(err, res) {\n      assert(!err);\n      assert.equal(res.stats.pending, 0);\n      assert.equal(res.stats.passes, 0);\n      assert.equal(res.stats.failures, 2);\n\n      assert.equal(res.failures[0].title,\n        'fails exactly once when a global error is thrown first');\n      assert.equal(res.failures[1].title,\n        'fails exactly once when a global error is thrown second');\n      assert.equal(res.code, 2);\n      done();\n    });\n  });\n});\n"]},"hash":"bd0dc68273d613cef77d1e0646200e253f54d2c5"}
